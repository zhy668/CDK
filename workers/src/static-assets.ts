/**
 * 静态资源文件
 * 自动生成，请勿手动编辑
 */

export interface StaticAsset {
    content: string;
    mimeType: string;
}

export const STATIC_ASSETS: Record<string, StaticAsset> = {
  '/': {
    content: "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CDK - 在线卡密分发系统</title>\n    <link rel=\"stylesheet\" href=\"styles/main.css?v=3.2\">\n</head>\n<body>\n    <div id=\"app\">\n        <!-- Navigation -->\n        <nav class=\"navbar\">\n            <div class=\"nav-container\">\n                <div class=\"nav-brand\">\n                    <h1>CDK 卡密分发系统</h1>\n                </div>\n                <div class=\"nav-menu\">\n                    <button id=\"nav-home\" class=\"nav-btn\" style=\"display: none;\">主页</button>\n                    <button id=\"nav-admin\" class=\"nav-btn\" style=\"display: none;\">管理员</button>\n                    <div id=\"nav-user-info\" class=\"user-info\">\n                        <!-- User info will be injected here by auth.js -->\n                    </div>\n                </div>\n            </div>\n        </nav>\n\n        <!-- Auth Error Message -->\n        <div id=\"auth-error\" class=\"auth-error\" style=\"display: none;\"></div>\n\n        <!-- Main Content -->\n        <main class=\"main-content\">\n            <!-- Login Page -->\n            <div id=\"login-page\" class=\"page\">\n                <div class=\"login-container\">\n                    <div class=\"login-card\">\n                        <div class=\"login-header\">\n                            <h2>欢迎使用 CDK 卡密分发系统</h2>\n                            <p>请使用 Linux.do 账号登录</p>\n                        </div>\n                        <div class=\"login-body\">\n                            <div class=\"login-icon\">\n                                <svg width=\"80\" height=\"80\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z\" fill=\"currentColor\"/>\n                                </svg>\n                            </div>\n                            <div id=\"login-user-info\" class=\"login-user-info\">\n                                <!-- Login button will be injected here by auth.js -->\n                            </div>\n                            <div class=\"login-footer\">\n                                <p class=\"login-hint\">登录后即可创建和管理卡密项目</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Home Page -->\n            <div id=\"home-page\" class=\"page\">\n                <div class=\"hero\">\n                    <h2>欢迎使用 CDK 卡密分发系统</h2>\n                    <p>简单、安全、高效的在线卡密分发解决方案</p>\n                    <div class=\"hero-actions\">\n                        <button id=\"btn-create-project\" class=\"btn btn-primary\">创建新项目</button>\n                        <button id=\"btn-manage-projects\" class=\"btn btn-secondary\">管理项目</button>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Create Project Page -->\n            <div id=\"create-page\" class=\"page\">\n                <div class=\"page-header\">\n                    <h2>创建新项目</h2>\n                    <button id=\"btn-back-home\" class=\"btn btn-secondary\">返回首页</button>\n                </div>\n                \n                <form id=\"create-form\" class=\"form-container\">\n                    <div class=\"form-group\">\n                        <label for=\"project-name\">项目名称 *</label>\n                        <input type=\"text\" id=\"project-name\" required maxlength=\"50\" \n                               placeholder=\"请输入项目名称（1-50字符）\">\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"project-password\">项目密码 *</label>\n                        <input type=\"password\" id=\"project-password\" required minlength=\"6\" maxlength=\"20\"\n                               placeholder=\"请输入项目密码（6-20字符）\">\n                        <small class=\"form-hint\">用户领取卡密时需要输入的密码</small>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"admin-password\">管理密码 *</label>\n                        <input type=\"password\" id=\"admin-password\" required minlength=\"6\" maxlength=\"20\"\n                               placeholder=\"请输入管理密码（6-20字符）\">\n                        <small class=\"form-hint\">用于编辑和删除项目的管理密码</small>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"project-description\">项目描述</label>\n                        <textarea id=\"project-description\" maxlength=\"200\" rows=\"3\"\n                                  placeholder=\"请输入项目描述（可选，最多200字符）\"></textarea>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <div class=\"checkbox-row\">\n                            <span class=\"checkbox-text\">限制每个用户只能领取一次</span>\n                            <input type=\"checkbox\" id=\"limit-one-per-user\" checked />\n                        </div>\n                        <small class=\"form-hint\">（开启后，每个用户基于IP和账号只能领取一次）</small>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"cards-input\">卡密内容 *</label>\n                        <div class=\"cards-input-container\">\n                            <div class=\"input-format-tabs\">\n                                <button type=\"button\" class=\"tab-btn active\" data-format=\"text\">文本格式</button>\n                                <button type=\"button\" class=\"tab-btn\" data-format=\"csv\">CSV格式</button>\n                                <button type=\"button\" class=\"tab-btn\" data-format=\"json\">JSON格式</button>\n                            </div>\n                            <textarea id=\"cards-input\" rows=\"10\" required\n                                      placeholder=\"请输入卡密内容，然后点击\"导入\"按钮\"></textarea>\n                            <div class=\"input-options\">\n                                <div class=\"input-tools\">\n                                    <button type=\"button\" class=\"btn-tool\" onclick=\"importCards()\">\n                                        📥 导入\n                                    </button>\n                                    <button type=\"button\" class=\"btn-tool\" onclick=\"clearCards()\">\n                                        🗑️ 清空\n                                    </button>\n                                    <span class=\"cards-count\" id=\"cardsCount\">0 条卡密</span>\n                                </div>\n                                <label class=\"checkbox-label\">\n                                    <input type=\"checkbox\" id=\"remove-duplicates\" checked>\n                                    自动去重\n                                </label>\n                            </div>\n                        </div>\n\n                        <!-- 导入的卡密列表 -->\n                        <div id=\"imported-cards-list\" class=\"imported-cards-list\" style=\"display: none;\">\n                            <div class=\"list-header\">\n                                <h4>已导入的卡密 (<span id=\"imported-count\">0</span> 条)</h4>\n                                <button type=\"button\" class=\"btn-tool\" onclick=\"clearImportedCards()\">\n                                    🗑️ 清空列表\n                                </button>\n                            </div>\n                            <div id=\"cards-container\" class=\"cards-container\">\n                                <!-- 卡密列表将在这里动态生成 -->\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- 项目创建不需要 Turnstile 验证 -->\n\n                    <div class=\"form-actions\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"btn-create-project\">创建项目</button>\n                        <button type=\"button\" id=\"btn-clear-form\" class=\"btn btn-secondary\">清空表单</button>\n                    </div>\n                </form>\n            </div>\n\n            <!-- Manage Projects Page -->\n            <div id=\"manage-page\" class=\"page\">\n                <div class=\"page-header\">\n                    <h2>项目管理</h2>\n                    <button id=\"btn-back-home-2\" class=\"btn btn-secondary\">返回首页</button>\n                </div>\n\n                <div id=\"projects-container\">\n                    <div id=\"projects-loading\" class=\"loading\">加载中...</div>\n                    <div id=\"projects-list\" class=\"projects-grid\"></div>\n                    <div id=\"projects-empty\" class=\"empty-state\" style=\"display: none;\">\n                        <p>暂无项目</p>\n                        <button id=\"btn-create-first\" class=\"btn btn-primary\">创建第一个项目</button>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Claim Page -->\n            <div id=\"claim-page\" class=\"page\">\n                <div class=\"claim-container\">\n                    <div id=\"password-form\" class=\"password-form\">\n                        <h2>请输入项目密码</h2>\n                        <form id=\"verify-form\">\n                            <div class=\"form-group\">\n                                <input type=\"password\" id=\"claim-password\" required\n                                       placeholder=\"请输入项目密码\">\n                            </div>\n\n                            <!-- Turnstile 验证组件 -->\n                            <div id=\"claim-turnstile-container\" class=\"turnstile-container\">\n                                <label>安全验证</label>\n                                <div id=\"claim-turnstile-widget\" class=\"turnstile-widget\"></div>\n                                <div class=\"form-hint\">请完成安全验证以继续</div>\n                            </div>\n\n                            <button type=\"submit\" class=\"btn btn-primary\">验证密码</button>\n                        </form>\n                    </div>\n\n                    <div id=\"claim-result\" class=\"claim-result\" style=\"display: none;\">\n                        <div id=\"claim-success\" class=\"result-success\" style=\"display: none;\">\n                            <h2>领取成功！</h2>\n                            <div class=\"card-content\">\n                                <label>您的卡密：</label>\n                                <div id=\"claimed-card\" class=\"card-display\"></div>\n                                <button id=\"btn-copy-card\" class=\"btn btn-secondary\">复制卡密</button>\n                            </div>\n                        </div>\n\n                        <div id=\"claim-error\" class=\"result-error\" style=\"display: none;\">\n                            <h2>领取失败</h2>\n                            <p id=\"error-message\"></p>\n                            <button id=\"btn-retry\" class=\"btn btn-primary\">重新尝试</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Admin Page -->\n            <div id=\"admin-page\" class=\"page\">\n                <div class=\"page-header\">\n                    <h2>管理员面板</h2>\n                </div>\n\n                <div class=\"admin-stats\">\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value\" id=\"admin-total-users\">0</div>\n                        <div class=\"stat-label\">总用户数</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value\" id=\"admin-active-users\">0</div>\n                        <div class=\"stat-label\">活跃用户</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value\" id=\"admin-banned-users\">0</div>\n                        <div class=\"stat-label\">封禁用户</div>\n                    </div>\n                </div>\n\n                <div class=\"users-section\">\n                    <h3>用户列表</h3>\n                    <div id=\"users-loading\" class=\"loading\">加载中...</div>\n                    <div id=\"users-list\" class=\"users-list\"></div>\n                </div>\n            </div>\n        </main>\n\n        <!-- Edit Project Modal -->\n        <div id=\"edit-project-modal\" class=\"modal\" style=\"display: none;\">\n            <div class=\"modal-content modal-large\">\n                <span class=\"modal-close\" onclick=\"app.closeEditProjectModal()\">&times;</span>\n                <h3>编辑项目</h3>\n                <div id=\"edit-project-content\">\n                    <!-- 项目基本信息 -->\n                    <div class=\"edit-section\">\n                        <h4>项目状态</h4>\n                        <div class=\"status-toggle\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"project-status-toggle\">\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span id=\"project-status-text\">项目已启用</span>\n                        </div>\n                    </div>\n\n                    <!-- 项目描述 -->\n                    <div class=\"edit-section\">\n                        <h4>项目描述</h4>\n                        <textarea id=\"edit-project-description\" placeholder=\"请输入项目描述（可选，最多200字符）\" maxlength=\"200\" rows=\"3\"></textarea>\n                        <button class=\"btn btn-primary\" onclick=\"app.updateProjectDescription()\">保存描述</button>\n                    </div>\n\n                    <!-- 卡密管理 -->\n                    <div class=\"edit-section\">\n                        <h4>卡密管理</h4>\n                        <div class=\"cards-stats\">\n                            <span>总卡密数: <strong id=\"edit-total-cards\">0</strong></span>\n                            <span>已领取: <strong id=\"edit-claimed-cards\">0</strong></span>\n                            <span>剩余: <strong id=\"edit-remaining-cards\">0</strong></span>\n                        </div>\n\n                        <!-- 添加卡密 -->\n                        <div class=\"add-cards-section\">\n                            <h5>添加新卡密</h5>\n                            <textarea id=\"new-cards-input\" placeholder=\"每行一个卡密\" rows=\"5\"></textarea>\n                            <button class=\"btn btn-primary\" onclick=\"app.addNewCards()\">添加卡密</button>\n                        </div>\n\n                        <!-- 卡密列表 -->\n                        <div class=\"cards-list-section\">\n                            <h5>卡密列表</h5>\n                            <div id=\"edit-cards-list\" class=\"edit-cards-list\">\n                                <!-- 卡密列表将在这里动态生成 -->\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Loading Overlay -->\n        <div id=\"loading-overlay\" class=\"loading-overlay\" style=\"display: none;\">\n            <div class=\"loading-spinner\"></div>\n            <p>处理中...</p>\n        </div>\n\n        <!-- Toast Notifications -->\n        <div id=\"toast-container\" class=\"toast-container\"></div>\n    </div>\n\n    <!-- Scripts -->\n    <script src=\"js/config.js?v=3.0\"></script>\n    <script src=\"js/utils.js?v=3.0\"></script>\n    <script src=\"js/api.js?v=3.0\"></script>\n    <script src=\"js/auth.js?v=3.0\"></script>\n    <script src=\"js/turnstile.js?v=3.0\"></script>\n    <script src=\"js/app.js?v=3.0\"></script>\n</body>\n</html>\n",
    mimeType: 'text/html; charset=utf-8'
  },
  '/index.html': {
    content: "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CDK - 在线卡密分发系统</title>\n    <link rel=\"stylesheet\" href=\"/styles/main.css?v=3.2\">\n</head>\n<body>\n    <div id=\"app\">\n        <!-- Navigation -->\n        <nav class=\"navbar\">\n            <div class=\"nav-container\">\n                <div class=\"nav-brand\">\n                    <h1>CDK 卡密分发系统</h1>\n                </div>\n                <div class=\"nav-menu\">\n                    <button id=\"nav-home\" class=\"nav-btn\" style=\"display: none;\">主页</button>\n                    <button id=\"nav-admin\" class=\"nav-btn\" style=\"display: none;\">管理员</button>\n                    <div id=\"nav-user-info\" class=\"user-info\">\n                        <!-- User info will be injected here by auth.js -->\n                    </div>\n                </div>\n            </div>\n        </nav>\n\n        <!-- Auth Error Message -->\n        <div id=\"auth-error\" class=\"auth-error\" style=\"display: none;\"></div>\n\n        <!-- Main Content -->\n        <main class=\"main-content\">\n            <!-- Login Page -->\n            <div id=\"login-page\" class=\"page\">\n                <div class=\"login-container\">\n                    <div class=\"login-card\">\n                        <div class=\"login-header\">\n                            <h2>欢迎使用 CDK 卡密分发系统</h2>\n                            <p>请使用 Linux.do 账号登录</p>\n                        </div>\n                        <div class=\"login-body\">\n                            <div class=\"login-icon\">\n                                <svg width=\"80\" height=\"80\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z\" fill=\"currentColor\"/>\n                                </svg>\n                            </div>\n                            <div id=\"login-user-info\" class=\"login-user-info\">\n                                <!-- Login button will be injected here by auth.js -->\n                            </div>\n                            <div class=\"login-footer\">\n                                <p class=\"login-hint\">登录后即可创建和管理卡密项目</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Home Page -->\n            <div id=\"home-page\" class=\"page\">\n                <div class=\"hero\">\n                    <h2>欢迎使用 CDK 卡密分发系统</h2>\n                    <p>简单、安全、高效的在线卡密分发解决方案</p>\n                    <div class=\"hero-actions\">\n                        <button id=\"btn-create-project\" class=\"btn btn-primary\">创建新项目</button>\n                        <button id=\"btn-manage-projects\" class=\"btn btn-secondary\">管理项目</button>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Create Project Page -->\n            <div id=\"create-page\" class=\"page\">\n                <div class=\"page-header\">\n                    <h2>创建新项目</h2>\n                    <button id=\"btn-back-home\" class=\"btn btn-secondary\">返回首页</button>\n                </div>\n                \n                <form id=\"create-form\" class=\"form-container\">\n                    <div class=\"form-group\">\n                        <label for=\"project-name\">项目名称 *</label>\n                        <input type=\"text\" id=\"project-name\" required maxlength=\"50\" \n                               placeholder=\"请输入项目名称（1-50字符）\">\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"project-password\">项目密码 *</label>\n                        <input type=\"password\" id=\"project-password\" required minlength=\"6\" maxlength=\"20\"\n                               placeholder=\"请输入项目密码（6-20字符）\">\n                        <small class=\"form-hint\">用户领取卡密时需要输入的密码</small>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"admin-password\">管理密码 *</label>\n                        <input type=\"password\" id=\"admin-password\" required minlength=\"6\" maxlength=\"20\"\n                               placeholder=\"请输入管理密码（6-20字符）\">\n                        <small class=\"form-hint\">用于编辑和删除项目的管理密码</small>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"project-description\">项目描述</label>\n                        <textarea id=\"project-description\" maxlength=\"200\" rows=\"3\"\n                                  placeholder=\"请输入项目描述（可选，最多200字符）\"></textarea>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <div class=\"checkbox-row\">\n                            <span class=\"checkbox-text\">限制每个用户只能领取一次</span>\n                            <input type=\"checkbox\" id=\"limit-one-per-user\" checked />\n                        </div>\n                        <small class=\"form-hint\">（开启后，每个用户基于IP和账号只能领取一次）</small>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"cards-input\">卡密内容 *</label>\n                        <div class=\"cards-input-container\">\n                            <div class=\"input-format-tabs\">\n                                <button type=\"button\" class=\"tab-btn active\" data-format=\"text\">文本格式</button>\n                                <button type=\"button\" class=\"tab-btn\" data-format=\"csv\">CSV格式</button>\n                                <button type=\"button\" class=\"tab-btn\" data-format=\"json\">JSON格式</button>\n                            </div>\n                            <textarea id=\"cards-input\" rows=\"10\" required\n                                      placeholder=\"请输入卡密内容，然后点击\"导入\"按钮\"></textarea>\n                            <div class=\"input-options\">\n                                <div class=\"input-tools\">\n                                    <button type=\"button\" class=\"btn-tool\" onclick=\"importCards()\">\n                                        📥 导入\n                                    </button>\n                                    <button type=\"button\" class=\"btn-tool\" onclick=\"clearCards()\">\n                                        🗑️ 清空\n                                    </button>\n                                    <span class=\"cards-count\" id=\"cardsCount\">0 条卡密</span>\n                                </div>\n                                <label class=\"checkbox-label\">\n                                    <input type=\"checkbox\" id=\"remove-duplicates\" checked>\n                                    自动去重\n                                </label>\n                            </div>\n                        </div>\n\n                        <!-- 导入的卡密列表 -->\n                        <div id=\"imported-cards-list\" class=\"imported-cards-list\" style=\"display: none;\">\n                            <div class=\"list-header\">\n                                <h4>已导入的卡密 (<span id=\"imported-count\">0</span> 条)</h4>\n                                <button type=\"button\" class=\"btn-tool\" onclick=\"clearImportedCards()\">\n                                    🗑️ 清空列表\n                                </button>\n                            </div>\n                            <div id=\"cards-container\" class=\"cards-container\">\n                                <!-- 卡密列表将在这里动态生成 -->\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- 项目创建不需要 Turnstile 验证 -->\n\n                    <div class=\"form-actions\">\n                        <button type=\"submit\" class=\"btn btn-primary\" id=\"btn-create-project\">创建项目</button>\n                        <button type=\"button\" id=\"btn-clear-form\" class=\"btn btn-secondary\">清空表单</button>\n                    </div>\n                </form>\n            </div>\n\n            <!-- Manage Projects Page -->\n            <div id=\"manage-page\" class=\"page\">\n                <div class=\"page-header\">\n                    <h2>项目管理</h2>\n                    <button id=\"btn-back-home-2\" class=\"btn btn-secondary\">返回首页</button>\n                </div>\n\n                <div id=\"projects-container\">\n                    <div id=\"projects-loading\" class=\"loading\">加载中...</div>\n                    <div id=\"projects-list\" class=\"projects-grid\"></div>\n                    <div id=\"projects-empty\" class=\"empty-state\" style=\"display: none;\">\n                        <p>暂无项目</p>\n                        <button id=\"btn-create-first\" class=\"btn btn-primary\">创建第一个项目</button>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Claim Page -->\n            <div id=\"claim-page\" class=\"page\">\n                <div class=\"claim-container\">\n                    <div id=\"password-form\" class=\"password-form\">\n                        <h2>请输入项目密码</h2>\n                        <form id=\"verify-form\">\n                            <div class=\"form-group\">\n                                <input type=\"password\" id=\"claim-password\" required\n                                       placeholder=\"请输入项目密码\">\n                            </div>\n\n                            <!-- Turnstile 验证组件 -->\n                            <div id=\"claim-turnstile-container\" class=\"turnstile-container\">\n                                <label>安全验证</label>\n                                <div id=\"claim-turnstile-widget\" class=\"turnstile-widget\"></div>\n                                <div class=\"form-hint\">请完成安全验证以继续</div>\n                            </div>\n\n                            <button type=\"submit\" class=\"btn btn-primary\">验证密码</button>\n                        </form>\n                    </div>\n\n                    <div id=\"claim-result\" class=\"claim-result\" style=\"display: none;\">\n                        <div id=\"claim-success\" class=\"result-success\" style=\"display: none;\">\n                            <h2>领取成功！</h2>\n                            <div class=\"card-content\">\n                                <label>您的卡密：</label>\n                                <div id=\"claimed-card\" class=\"card-display\"></div>\n                                <button id=\"btn-copy-card\" class=\"btn btn-secondary\">复制卡密</button>\n                            </div>\n                        </div>\n\n                        <div id=\"claim-error\" class=\"result-error\" style=\"display: none;\">\n                            <h2>领取失败</h2>\n                            <p id=\"error-message\"></p>\n                            <button id=\"btn-retry\" class=\"btn btn-primary\">重新尝试</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Admin Page -->\n            <div id=\"admin-page\" class=\"page\">\n                <div class=\"page-header\">\n                    <h2>管理员面板</h2>\n                </div>\n\n                <div class=\"admin-stats\">\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value\" id=\"admin-total-users\">0</div>\n                        <div class=\"stat-label\">总用户数</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value\" id=\"admin-active-users\">0</div>\n                        <div class=\"stat-label\">活跃用户</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-value\" id=\"admin-banned-users\">0</div>\n                        <div class=\"stat-label\">封禁用户</div>\n                    </div>\n                </div>\n\n                <div class=\"users-section\">\n                    <h3>用户列表</h3>\n                    <div id=\"users-loading\" class=\"loading\">加载中...</div>\n                    <div id=\"users-list\" class=\"users-list\"></div>\n                </div>\n            </div>\n        </main>\n\n        <!-- Edit Project Modal -->\n        <div id=\"edit-project-modal\" class=\"modal\" style=\"display: none;\">\n            <div class=\"modal-content modal-large\">\n                <span class=\"modal-close\" onclick=\"app.closeEditProjectModal()\">&times;</span>\n                <h3>编辑项目</h3>\n                <div id=\"edit-project-content\">\n                    <!-- 项目基本信息 -->\n                    <div class=\"edit-section\">\n                        <h4>项目状态</h4>\n                        <div class=\"status-toggle\">\n                            <label class=\"toggle-switch\">\n                                <input type=\"checkbox\" id=\"project-status-toggle\">\n                                <span class=\"toggle-slider\"></span>\n                            </label>\n                            <span id=\"project-status-text\">项目已启用</span>\n                        </div>\n                    </div>\n\n                    <!-- 项目描述 -->\n                    <div class=\"edit-section\">\n                        <h4>项目描述</h4>\n                        <textarea id=\"edit-project-description\" placeholder=\"请输入项目描述（可选，最多200字符）\" maxlength=\"200\" rows=\"3\"></textarea>\n                        <button class=\"btn btn-primary\" onclick=\"app.updateProjectDescription()\">保存描述</button>\n                    </div>\n\n                    <!-- 卡密管理 -->\n                    <div class=\"edit-section\">\n                        <h4>卡密管理</h4>\n                        <div class=\"cards-stats\">\n                            <span>总卡密数: <strong id=\"edit-total-cards\">0</strong></span>\n                            <span>已领取: <strong id=\"edit-claimed-cards\">0</strong></span>\n                            <span>剩余: <strong id=\"edit-remaining-cards\">0</strong></span>\n                        </div>\n\n                        <!-- 添加卡密 -->\n                        <div class=\"add-cards-section\">\n                            <h5>添加新卡密</h5>\n                            <textarea id=\"new-cards-input\" placeholder=\"每行一个卡密\" rows=\"5\"></textarea>\n                            <button class=\"btn btn-primary\" onclick=\"app.addNewCards()\">添加卡密</button>\n                        </div>\n\n                        <!-- 卡密列表 -->\n                        <div class=\"cards-list-section\">\n                            <h5>卡密列表</h5>\n                            <div id=\"edit-cards-list\" class=\"edit-cards-list\">\n                                <!-- 卡密列表将在这里动态生成 -->\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Loading Overlay -->\n        <div id=\"loading-overlay\" class=\"loading-overlay\" style=\"display: none;\">\n            <div class=\"loading-spinner\"></div>\n            <p>处理中...</p>\n        </div>\n\n        <!-- Toast Notifications -->\n        <div id=\"toast-container\" class=\"toast-container\"></div>\n    </div>\n\n    <!-- Scripts -->\n    <script src=\"/js/config.js?v=3.0\"></script>\n    <script src=\"/js/utils.js?v=3.0\"></script>\n    <script src=\"/js/api.js?v=3.0\"></script>\n    <script src=\"/js/auth.js?v=3.0\"></script>\n    <script src=\"/js/turnstile.js?v=3.0\"></script>\n    <script src=\"/js/app.js?v=3.0\"></script>\n</body>\n</html>\n",
    mimeType: 'text/html; charset=utf-8'
  },
  '/styles/main.css': {
    content: "/* CDK 卡密分发系统 - 主样式文件 */\n\n/* 基础重置和变量 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --primary-color: #007bff;\n    --secondary-color: #6c757d;\n    --success-color: #28a745;\n    --danger-color: #dc3545;\n    --warning-color: #ffc107;\n    --info-color: #17a2b8;\n    --light-color: #f8f9fa;\n    --dark-color: #343a40;\n    --border-color: #dee2e6;\n    --border-radius: 8px;\n    --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    --transition: all 0.3s ease;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    line-height: 1.6;\n    color: var(--dark-color);\n    background-color: #f5f5f5;\n}\n\n/* 导航栏 */\n.navbar {\n    background: white;\n    box-shadow: var(--box-shadow);\n    position: sticky;\n    top: 0;\n    z-index: 100;\n}\n\n.nav-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 1rem 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.nav-brand h1 {\n    color: var(--primary-color);\n    font-size: 1.5rem;\n}\n\n.nav-menu {\n    display: flex;\n    gap: 1rem;\n}\n\n.nav-btn {\n    background: none;\n    border: 1px solid var(--primary-color);\n    color: var(--primary-color);\n    padding: 0.5rem 1rem;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: var(--transition);\n}\n\n.nav-btn:hover {\n    background: var(--primary-color);\n    color: white;\n}\n\n/* 主内容区域 */\n.main-content {\n    max-width: 1200px;\n    margin: 2rem auto;\n    padding: 0 2rem;\n}\n\n/* 页面切换 */\n.page {\n    display: none;\n}\n\n.page.active {\n    display: block;\n}\n\n/* 首页样式 */\n.hero {\n    text-align: center;\n    padding: 4rem 2rem;\n    background: white;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n}\n\n.hero h2 {\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n    color: var(--dark-color);\n}\n\n.hero p {\n    font-size: 1.2rem;\n    color: var(--secondary-color);\n    margin-bottom: 2rem;\n}\n\n.hero-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n/* 页面头部 */\n.page-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 2rem;\n    padding-bottom: 1rem;\n    border-bottom: 2px solid var(--border-color);\n}\n\n.page-header h2 {\n    color: var(--dark-color);\n    font-size: 2rem;\n}\n\n/* 按钮样式 */\n.btn {\n    display: inline-block;\n    padding: 0.75rem 1.5rem;\n    border: none;\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    text-decoration: none;\n    font-size: 1rem;\n    font-weight: 500;\n    transition: var(--transition);\n    text-align: center;\n}\n\n.btn-primary {\n    background: var(--primary-color);\n    color: white;\n}\n\n.btn-primary:hover {\n    background: #0056b3;\n}\n\n.btn-secondary {\n    background: var(--secondary-color);\n    color: white;\n}\n\n.btn-secondary:hover {\n    background: #545b62;\n}\n\n.btn-success {\n    background: var(--success-color);\n    color: white;\n}\n\n.btn-danger {\n    background: var(--danger-color);\n    color: white;\n}\n\n/* 表单样式 */\n.form-container {\n    background: white;\n    padding: 2rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n    color: var(--dark-color);\n}\n\n.form-group input,\n.form-group textarea {\n    width: 100%;\n    padding: 0.75rem;\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    font-size: 1rem;\n    transition: var(--transition);\n}\n\n.form-group input:focus,\n.form-group textarea:focus {\n    outline: none;\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n/* 卡密输入区域 */\n.cards-input-container {\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.input-format-tabs {\n    display: flex;\n    background: var(--light-color);\n    border-bottom: 1px solid var(--border-color);\n}\n\n.tab-btn {\n    flex: 1;\n    padding: 0.75rem;\n    border: none;\n    background: transparent;\n    cursor: pointer;\n    transition: var(--transition);\n}\n\n.tab-btn.active {\n    background: white;\n    color: var(--primary-color);\n    font-weight: 500;\n}\n\n.cards-input-container textarea {\n    border: none;\n    border-radius: 0;\n    resize: vertical;\n}\n\n.input-options {\n    padding: 1rem;\n    background: var(--light-color);\n    border-top: 1px solid var(--border-color);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 1rem;\n}\n\n/* 输入工具栏 */\n.input-tools {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    flex-wrap: wrap;\n}\n\n.btn-tool {\n    padding: 0.4rem 0.8rem;\n    font-size: 0.85rem;\n    border: 1px solid var(--border-color);\n    background: var(--background-color);\n    color: var(--text-color);\n    border-radius: var(--border-radius);\n    cursor: pointer;\n    transition: all 0.2s ease;\n    white-space: nowrap;\n}\n\n.btn-tool:hover {\n    background: var(--primary-color);\n    color: white;\n    border-color: var(--primary-color);\n}\n\n.cards-count {\n    font-size: 0.85rem;\n    color: var(--text-secondary);\n    font-weight: 500;\n    padding: 0.4rem 0.8rem;\n    background: var(--background-color);\n    border-radius: var(--border-radius);\n    border: 1px solid var(--border-color);\n    white-space: nowrap;\n}\n\n/* 导入按钮特殊样式 */\n.btn-tool:first-child {\n    background: var(--primary-color);\n    color: white;\n    border-color: var(--primary-color);\n}\n\n.btn-tool:first-child:hover {\n    background: var(--primary-dark);\n    border-color: var(--primary-dark);\n}\n\n.checkbox-label {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    cursor: pointer;\n}\n\n.checkbox-inline {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    flex-wrap: wrap;\n}\n\n.checkbox-inline .checkbox-label {\n    margin: 0;\n}\n\n.checkbox-inline .form-hint {\n    margin: 0;\n    color: var(--text-secondary);\n}\n\n.checkbox-row {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0.75rem;\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    background: #f8f9fa;\n}\n\n.checkbox-row .checkbox-text {\n    font-weight: 500;\n    color: var(--dark-color);\n}\n\n.checkbox-row input[type=\"checkbox\"] {\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n}\n\n.form-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: flex-end;\n    margin-top: 2rem;\n    padding-top: 1rem;\n    border-top: 1px solid var(--border-color);\n}\n\n/* 项目网格 */\n.projects-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    gap: 1.5rem;\n}\n\n.project-card {\n    background: white;\n    padding: 1.5rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n    transition: var(--transition);\n}\n\n.project-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n}\n\n.project-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 1rem;\n}\n\n.project-title {\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: var(--dark-color);\n    margin-bottom: 0.5rem;\n}\n\n.project-status {\n    padding: 0.25rem 0.5rem;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    font-weight: 500;\n}\n\n.status-active {\n    background: #d4edda;\n    color: #155724;\n}\n\n.status-inactive {\n    background: #f8d7da;\n    color: #721c24;\n}\n\n.project-stats {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 1rem;\n    margin: 1rem 0;\n}\n\n.stat-item {\n    text-align: center;\n}\n\n.stat-value {\n    font-size: 1.5rem;\n    font-weight: 600;\n    color: var(--primary-color);\n}\n\n.stat-label {\n    font-size: 0.875rem;\n    color: var(--secondary-color);\n}\n\n.project-actions {\n    display: flex;\n    gap: 0.5rem;\n    margin-top: 1rem;\n}\n\n.project-actions .btn {\n    flex: 1;\n    padding: 0.5rem;\n    font-size: 0.875rem;\n}\n\n/* 领取页面 */\n.claim-container {\n    max-width: 500px;\n    margin: 2rem auto;\n}\n\n.password-form,\n.claim-result {\n    background: white;\n    padding: 2rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n    text-align: center;\n}\n\n.card-content {\n    margin: 2rem 0;\n}\n\n.card-display {\n    background: var(--light-color);\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    font-family: monospace;\n    font-size: 1.1rem;\n    word-break: break-all;\n    margin: 1rem 0;\n    border: 2px dashed var(--border-color);\n}\n\n.result-success {\n    color: var(--success-color);\n}\n\n.result-error {\n    color: var(--danger-color);\n}\n\n/* 加载和状态 */\n.loading {\n    text-align: center;\n    padding: 2rem;\n    color: var(--secondary-color);\n}\n\n.loading-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n}\n\n.loading-spinner {\n    width: 40px;\n    height: 40px;\n    border: 4px solid var(--light-color);\n    border-top: 4px solid var(--primary-color);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    margin-bottom: 1rem;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n.empty-state {\n    text-align: center;\n    padding: 4rem 2rem;\n    color: var(--secondary-color);\n}\n\n/* Toast 通知 */\n.toast-container {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    z-index: 1100;\n}\n\n.toast {\n    background: white;\n    padding: 1rem 1.5rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n    margin-bottom: 0.5rem;\n    border-left: 4px solid var(--primary-color);\n    animation: slideIn 0.3s ease;\n}\n\n.toast.success {\n    border-left-color: var(--success-color);\n}\n\n.toast.error {\n    border-left-color: var(--danger-color);\n}\n\n.toast.warning {\n    border-left-color: var(--warning-color);\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* 消息提示动画 */\n@keyframes slideInRight {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n@keyframes slideOutRight {\n    from {\n        transform: translateX(0);\n        opacity: 1;\n    }\n    to {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n}\n\n/* 表单提示样式 */\n.form-hint {\n    display: block;\n    margin-top: 5px;\n    font-size: 12px;\n    color: #666;\n    line-height: 1.4;\n}\n\n/* 导入卡密列表样式 */\n.imported-cards-list {\n    margin-top: 20px;\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    background: #f9f9f9;\n    overflow: hidden;\n}\n\n.list-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 15px 20px;\n    background: #f0f0f0;\n    border-bottom: 1px solid #e0e0e0;\n}\n\n.list-header h4 {\n    margin: 0;\n    color: #333;\n    font-size: 16px;\n}\n\n.cards-container {\n    max-height: 300px;\n    overflow-y: auto;\n    padding: 10px;\n}\n\n.card-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 12px;\n    margin-bottom: 5px;\n    background: white;\n    border: 1px solid #e0e0e0;\n    border-radius: 4px;\n    font-family: 'Courier New', monospace;\n    font-size: 14px;\n}\n\n.card-content {\n    flex: 1;\n    word-break: break-all;\n    margin-right: 10px;\n    color: #333;\n}\n\n.card-delete {\n    background: #ff4757;\n    color: white;\n    border: none;\n    border-radius: 3px;\n    padding: 4px 8px;\n    cursor: pointer;\n    font-size: 12px;\n    transition: background-color 0.2s;\n}\n\n.card-delete:hover {\n    background: #ff3838;\n}\n\n.cards-container::-webkit-scrollbar {\n    width: 6px;\n}\n\n.cards-container::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 3px;\n}\n\n.cards-container::-webkit-scrollbar-thumb {\n    background: #c1c1c1;\n    border-radius: 3px;\n}\n\n.cards-container::-webkit-scrollbar-thumb:hover {\n    background: #a8a8a8;\n}\n\n/* Turnstile 样式 */\n.turnstile-container {\n    margin: 20px 0;\n    padding: 15px;\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    background-color: #f9f9f9;\n    display: none;\n}\n\n.turnstile-container.show {\n    display: block;\n    animation: fadeIn 0.3s ease-in;\n}\n\n.turnstile-widget {\n    margin: 10px 0;\n    display: flex;\n    justify-content: center;\n}\n\n.turnstile-container .form-hint {\n    margin-top: 8px;\n    font-size: 12px;\n    color: #666;\n    text-align: center;\n}\n\n.turnstile-container label {\n    font-weight: 600;\n    color: #333;\n    margin-bottom: 8px;\n    display: block;\n}\n\n/* Turnstile 加载状态 */\n.turnstile-loading {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.75rem;\n    padding: 1.5rem;\n    color: var(--secondary-color);\n}\n\n.loading-spinner {\n    width: 24px;\n    height: 24px;\n    border: 2px solid #e0e0e0;\n    border-top: 2px solid var(--primary-color);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n.loading-text {\n    font-size: 0.875rem;\n    color: #666;\n}\n\n/* Turnstile 错误状态 */\n.turnstile-error {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.75rem;\n    padding: 1.5rem;\n    color: var(--error-color);\n}\n\n.error-icon {\n    font-size: 1.5rem;\n}\n\n.error-text {\n    font-size: 0.875rem;\n    margin-bottom: 0.5rem;\n    color: #d32f2f;\n}\n\n.retry-btn {\n    padding: 0.5rem 1rem;\n    background: var(--primary-color);\n    color: white;\n    border: none;\n    border-radius: 6px;\n    cursor: pointer;\n    font-size: 0.875rem;\n    transition: background-color 0.2s;\n}\n\n.retry-btn:hover {\n    background: var(--primary-hover);\n}\n\n/* 旋转动画 */\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n    .nav-container {\n        padding: 1rem;\n        flex-direction: column;\n        gap: 1rem;\n    }\n\n    .main-content {\n        padding: 0 1rem;\n    }\n\n    .hero {\n        padding: 2rem 1rem;\n    }\n\n    .hero h2 {\n        font-size: 2rem;\n    }\n\n    .hero-actions {\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .page-header {\n        flex-direction: column;\n        gap: 1rem;\n        align-items: flex-start;\n    }\n\n    .form-actions {\n        flex-direction: column;\n    }\n\n    .projects-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .project-stats {\n        grid-template-columns: repeat(2, 1fr);\n    }\n\n    .project-actions {\n        flex-direction: column;\n    }\n\n    .turnstile-container {\n        margin: 15px 0;\n        padding: 12px;\n    }\n}\n\n/* ==================== Authentication Styles ==================== */\n\n/* Auth Error Message */\n.auth-error {\n    background-color: #f8d7da;\n    color: #721c24;\n    padding: 1rem;\n    margin: 1rem auto;\n    max-width: 1200px;\n    border-radius: var(--border-radius);\n    border: 1px solid #f5c6cb;\n    text-align: center;\n}\n\n/* User Info in Navigation */\n.user-info {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.user-info-container {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n    padding: 0.5rem;\n    background: var(--light-color);\n    border-radius: var(--border-radius);\n}\n\n.user-avatar {\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    object-fit: cover;\n    border: 2px solid var(--primary-color);\n}\n\n.user-avatar-placeholder {\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    background: var(--primary-color);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 1.2rem;\n}\n\n.user-details {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.user-name {\n    font-weight: 600;\n    font-size: 0.9rem;\n    color: var(--dark-color);\n}\n\n.user-username {\n    font-size: 0.75rem;\n    color: var(--secondary-color);\n}\n\n/* Login Page */\n.login-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 60vh;\n    padding: 2rem;\n}\n\n.login-card {\n    background: white;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n    padding: 3rem;\n    max-width: 500px;\n    width: 100%;\n    text-align: center;\n}\n\n.login-header h2 {\n    color: var(--primary-color);\n    margin-bottom: 0.5rem;\n    font-size: 1.8rem;\n}\n\n.login-header p {\n    color: var(--secondary-color);\n    margin-bottom: 2rem;\n}\n\n.login-body {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 2rem;\n}\n\n.login-icon {\n    color: var(--primary-color);\n    opacity: 0.8;\n}\n\n.login-user-info {\n    width: 100%;\n}\n\n.login-user-info .btn {\n    width: 100%;\n    padding: 1rem;\n    font-size: 1.1rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.login-footer {\n    margin-top: 1rem;\n}\n\n.login-hint {\n    color: var(--secondary-color);\n    font-size: 0.9rem;\n}\n\n/* Button Sizes */\n.btn-sm {\n    padding: 0.25rem 0.75rem;\n    font-size: 0.875rem;\n}\n\n/* Responsive for Auth */\n@media (max-width: 768px) {\n    .user-info-container {\n        flex-direction: column;\n        gap: 0.5rem;\n        padding: 0.75rem;\n    }\n\n    .user-details {\n        align-items: center;\n    }\n\n    .login-card {\n        padding: 2rem 1.5rem;\n    }\n\n    .login-header h2 {\n        font-size: 1.5rem;\n    }\n\n    .nav-menu {\n        flex-direction: column;\n        gap: 0.5rem;\n    }\n}\n\n/* ==================== Admin Panel Styles ==================== */\n\n#admin-page {\n    padding: 2rem;\n}\n\n.admin-stats {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 1.5rem;\n    margin-bottom: 2rem;\n}\n\n.stat-card {\n    background: var(--card-bg);\n    padding: 1.5rem;\n    border-radius: var(--border-radius);\n    text-align: center;\n    border: 1px solid var(--border-color);\n    box-shadow: var(--shadow);\n}\n\n.stat-card .stat-value {\n    font-size: 2rem;\n    font-weight: 600;\n    color: var(--primary-color);\n    margin-bottom: 0.5rem;\n}\n\n.stat-card .stat-label {\n    font-size: 0.875rem;\n    color: var(--secondary-color);\n}\n\n.users-section {\n    background: var(--card-bg);\n    padding: 1.5rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow);\n    border: 1px solid var(--border-color);\n}\n\n.users-section h3 {\n    margin-bottom: 1rem;\n    color: var(--dark-color);\n}\n\n.users-list {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.user-card {\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    gap: 1rem;\n    padding: 1rem;\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    align-items: center;\n    background: var(--card-bg);\n    box-shadow: var(--shadow);\n}\n\n.user-card.banned {\n    background: #fff3cd;\n    border-color: #ffc107;\n}\n\n.user-avatar-admin {\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    object-fit: cover;\n}\n\n.user-info-admin {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n}\n\n.user-name-admin {\n    font-weight: 600;\n    color: var(--dark-color);\n}\n\n.user-username-admin {\n    color: var(--secondary-color);\n    font-size: 0.875rem;\n}\n\n.user-meta {\n    display: flex;\n    gap: 1rem;\n    font-size: 0.75rem;\n    color: var(--secondary-color);\n    margin-top: 0.25rem;\n}\n\n.user-status {\n    display: inline-block;\n    padding: 0.25rem 0.5rem;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    font-weight: 500;\n}\n\n.user-status.active {\n    background: #d4edda;\n    color: #155724;\n}\n\n.user-status.banned {\n    background: #f8d7da;\n    color: #721c24;\n}\n\n.user-actions {\n    display: flex;\n    gap: 0.5rem;\n}\n\n.ban-reason {\n    margin-top: 0.5rem;\n    padding: 0.5rem;\n    background: #fff3cd;\n    border-left: 3px solid #ffc107;\n    font-size: 0.875rem;\n    color: #856404;\n}\n\n@media (max-width: 768px) {\n    .user-card {\n        grid-template-columns: 1fr;\n        text-align: center;\n    }\n\n    .user-actions {\n        justify-content: center;\n    }\n}\n\n/* ==================== Edit Project Modal Styles ==================== */\n\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n}\n\n.modal-content {\n    background-color: var(--card-bg);\n    margin: auto;\n    padding: 2rem;\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    width: 90%;\n    max-width: 600px;\n    position: relative;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.modal-large {\n    max-width: 800px;\n    max-height: 90vh;\n    overflow-y: auto;\n}\n\n.modal-close {\n    position: absolute;\n    right: 1rem;\n    top: 1rem;\n    font-size: 28px;\n    font-weight: bold;\n    color: var(--secondary-color);\n    cursor: pointer;\n    line-height: 1;\n    transition: color 0.3s;\n}\n\n.modal-close:hover,\n.modal-close:focus {\n    color: var(--dark-color);\n}\n\n.edit-section {\n    margin-bottom: 2rem;\n    padding: 1.5rem;\n    background: var(--card-bg);\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n}\n\n.edit-section h4 {\n    margin-bottom: 1rem;\n    color: var(--dark-color);\n    font-size: 1.1rem;\n}\n\n.edit-section h5 {\n    margin-bottom: 0.75rem;\n    color: var(--dark-color);\n    font-size: 1rem;\n}\n\n.status-toggle {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.toggle-switch {\n    position: relative;\n    display: inline-block;\n    width: 50px;\n    height: 24px;\n}\n\n.toggle-switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n.toggle-slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    transition: 0.4s;\n    border-radius: 24px;\n}\n\n.toggle-slider:before {\n    position: absolute;\n    content: \"\";\n    height: 18px;\n    width: 18px;\n    left: 3px;\n    bottom: 3px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n}\n\n.toggle-switch input:checked + .toggle-slider {\n    background-color: var(--primary-color);\n}\n\n.toggle-switch input:checked + .toggle-slider:before {\n    transform: translateX(26px);\n}\n\n.cards-stats {\n    display: flex;\n    gap: 2rem;\n    margin-bottom: 1.5rem;\n    padding: 1rem;\n    background: var(--bg-color);\n    border-radius: var(--border-radius);\n}\n\n.cards-stats span {\n    color: var(--secondary-color);\n}\n\n.cards-stats strong {\n    color: var(--primary-color);\n    font-size: 1.2rem;\n}\n\n.add-cards-section {\n    margin-bottom: 1.5rem;\n}\n\n.add-cards-section textarea {\n    width: 100%;\n    padding: 0.75rem;\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    font-family: monospace;\n    resize: vertical;\n    margin-bottom: 0.75rem;\n}\n\n.edit-cards-list {\n    max-height: 400px;\n    overflow-y: auto;\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n}\n\n.card-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.75rem 1rem;\n    border-bottom: 1px solid var(--border-color);\n}\n\n.card-item:last-child {\n    border-bottom: none;\n}\n\n.card-item.claimed {\n    background: #f8f9fa;\n    opacity: 0.7;\n}\n\n.card-content {\n    flex: 1;\n    font-family: monospace;\n    color: var(--dark-color);\n}\n\n.card-status {\n    margin-right: 1rem;\n    padding: 0.25rem 0.5rem;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    font-weight: 500;\n}\n\n.card-status.available {\n    background: #d4edda;\n    color: #155724;\n}\n\n.card-status.claimed {\n    background: #f8d7da;\n    color: #721c24;\n}\n\n.card-actions {\n    display: flex;\n    gap: 0.5rem;\n}\n",
    mimeType: 'text/css; charset=utf-8'
  },
  '/js/config.js': {
    content: "/**\r\n * CDK 系统配置文件\r\n * 在这里配置 API 地址和安全密钥\r\n */\r\n\r\n// 配置对象\r\nconst CDK_CONFIG = {\r\n    // API 基础地址 - 单Worker模式使用相对路径\r\n    // 在构建时会自动设置为空字符串，使用相对路径调用API\r\n    API_BASE_URL: '',\r\n\r\n    // API 安全密钥 - 当前已禁用，简化小项目部署\r\n    // 如需启用，请在 Worker 中取消注释认证中间件\r\n    API_SECRET_KEY: '',\r\n\r\n    // 请求超时时间（毫秒）\r\n    REQUEST_TIMEOUT: 30000,\r\n\r\n    // 是否启用调试模式\r\n    DEBUG_MODE: false,\r\n\r\n    // 版本信息\r\n    VERSION: '3.0.0',\r\n\r\n    // Turnstile 配置\r\n    TURNSTILE: {\r\n        SCRIPT_URL: 'https://challenges.cloudflare.com/turnstile/v0/api.js',\r\n        WIDGET_ID: null,\r\n        ENABLED: false,\r\n        SITE_KEY: ''\r\n    },\r\n\r\n    // LinuxDoConnect OAuth 配置\r\n    AUTH: {\r\n        ENABLED: true,\r\n        REQUIRE_LOGIN: true, // 是否全站需要登录\r\n        LOGIN_URL: '/api/auth/login',\r\n        LOGOUT_URL: '/api/auth/logout',\r\n        USERINFO_URL: '/api/auth/userinfo',\r\n        CALLBACK_URL: '/api/auth/callback'\r\n    }\r\n};\r\n\r\n// 导出配置（兼容不同的模块系统）\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = CDK_CONFIG;\r\n} else if (typeof window !== 'undefined') {\r\n    window.CDK_CONFIG = CDK_CONFIG;\r\n}\r\n\r\n// 配置验证函数\r\nfunction validateConfig() {\r\n    const errors = [];\r\n\r\n    // 单Worker模式下，API_BASE_URL为空是正常的\r\n    if (CDK_CONFIG.API_BASE_URL && CDK_CONFIG.API_BASE_URL === 'https://your-worker-domain.workers.dev') {\r\n        errors.push('请配置正确的 API_BASE_URL');\r\n    }\r\n\r\n    // API密钥当前已禁用，不需要验证\r\n    if (CDK_CONFIG.API_SECRET_KEY && CDK_CONFIG.API_SECRET_KEY === 'your-secret-key-here') {\r\n        errors.push('请配置 API_SECRET_KEY 安全密钥');\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n        console.warn('CDK 配置警告:', errors);\r\n        if (CDK_CONFIG.DEBUG_MODE) {\r\n            alert('配置错误:\\n' + errors.join('\\n'));\r\n        }\r\n    }\r\n\r\n    return errors.length === 0;\r\n}\r\n\r\n// 自动验证配置\r\nif (typeof window !== 'undefined') {\r\n    document.addEventListener('DOMContentLoaded', validateConfig);\r\n}\r\n",
    mimeType: 'application/javascript; charset=utf-8'
  },
  '/js/utils.js': {
    content: "/**\n * 工具函数库\n */\n\n// DOM 操作工具\nconst $ = (selector) => document.querySelector(selector);\nconst $$ = (selector) => document.querySelectorAll(selector);\n\n// 显示/隐藏元素\nfunction show(element) {\n    if (typeof element === 'string') {\n        element = $(element);\n    }\n    if (element) {\n        element.style.display = 'block';\n    }\n}\n\nfunction hide(element) {\n    if (typeof element === 'string') {\n        element = $(element);\n    }\n    if (element) {\n        element.style.display = 'none';\n    }\n}\n\n// 页面切换\nfunction showPage(pageId) {\n    // 隐藏所有页面\n    $$('.page').forEach(page => page.classList.remove('active'));\n    // 显示目标页面\n    const targetPage = $(pageId);\n    if (targetPage) {\n        targetPage.classList.add('active');\n    }\n}\n\n// 加载状态管理\nfunction showLoading(message = '处理中...') {\n    const overlay = $('#loading-overlay');\n    const text = overlay.querySelector('p');\n    if (text) {\n        text.textContent = message;\n    }\n    show(overlay);\n}\n\nfunction hideLoading() {\n    hide('#loading-overlay');\n}\n\n// Toast 通知\nfunction showToast(message, type = 'info', duration = 3000) {\n    const container = $('#toast-container');\n    const toast = document.createElement('div');\n    toast.className = `toast ${type}`;\n    toast.textContent = message;\n    \n    container.appendChild(toast);\n    \n    // 自动移除\n    setTimeout(() => {\n        if (toast.parentNode) {\n            toast.parentNode.removeChild(toast);\n        }\n    }, duration);\n}\n\n// 表单验证\nfunction validateForm(formId) {\n    const form = $(formId);\n    if (!form) return false;\n    \n    const inputs = form.querySelectorAll('input[required], textarea[required]');\n    let isValid = true;\n    \n    inputs.forEach(input => {\n        if (!input.value.trim()) {\n            input.classList.add('error');\n            isValid = false;\n        } else {\n            input.classList.remove('error');\n        }\n    });\n    \n    return isValid;\n}\n\n// 清空表单\nfunction clearForm(formId) {\n    const form = $(formId);\n    if (form) {\n        form.reset();\n        // 移除错误样式\n        form.querySelectorAll('.error').forEach(el => {\n            el.classList.remove('error');\n        });\n    }\n}\n\n// 复制到剪贴板\nasync function copyToClipboard(text) {\n    try {\n        await navigator.clipboard.writeText(text);\n        showToast('复制成功', 'success');\n        return true;\n    } catch (err) {\n        // 降级方案\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        document.body.appendChild(textArea);\n        textArea.select();\n        try {\n            document.execCommand('copy');\n            showToast('复制成功', 'success');\n            return true;\n        } catch (err) {\n            showToast('复制失败', 'error');\n            return false;\n        } finally {\n            document.body.removeChild(textArea);\n        }\n    }\n}\n\n// 格式化日期\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n    });\n}\n\n// 解析卡密内容\nfunction parseCards(input, format = 'text') {\n    if (!input || !input.trim()) return [];\n    \n    try {\n        switch (format) {\n            case 'json':\n                const parsed = JSON.parse(input);\n                if (Array.isArray(parsed)) {\n                    return parsed.map(item => \n                        typeof item === 'string' ? item : JSON.stringify(item)\n                    );\n                }\n                return [JSON.stringify(parsed)];\n            \n            case 'csv':\n                return input.split(/[,，]/).map(card => card.trim()).filter(card => card);\n            \n            case 'text':\n            default:\n                return input.split('\\n').map(card => card.trim()).filter(card => card);\n        }\n    } catch (error) {\n        // 降级到文本格式\n        return input.split('\\n').map(card => card.trim()).filter(card => card);\n    }\n}\n\n// 去重\nfunction removeDuplicates(array) {\n    return [...new Set(array)];\n}\n\n// 防抖函数\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// 节流函数\nfunction throttle(func, limit) {\n    let inThrottle;\n    return function() {\n        const args = arguments;\n        const context = this;\n        if (!inThrottle) {\n            func.apply(context, args);\n            inThrottle = true;\n            setTimeout(() => inThrottle = false, limit);\n        }\n    }\n}\n\n// 获取URL参数\nfunction getUrlParams() {\n    const params = new URLSearchParams(window.location.search);\n    const result = {};\n    for (const [key, value] of params) {\n        result[key] = value;\n    }\n    return result;\n}\n\n// 设置URL参数\nfunction setUrlParams(params) {\n    const url = new URL(window.location);\n    Object.keys(params).forEach(key => {\n        if (params[key] !== null && params[key] !== undefined) {\n            url.searchParams.set(key, params[key]);\n        } else {\n            url.searchParams.delete(key);\n        }\n    });\n    window.history.replaceState({}, '', url);\n}\n\n// 本地存储工具\nconst storage = {\n    set(key, value) {\n        try {\n            localStorage.setItem(key, JSON.stringify(value));\n        } catch (e) {\n            console.error('Storage set error:', e);\n        }\n    },\n    \n    get(key, defaultValue = null) {\n        try {\n            const item = localStorage.getItem(key);\n            return item ? JSON.parse(item) : defaultValue;\n        } catch (e) {\n            console.error('Storage get error:', e);\n            return defaultValue;\n        }\n    },\n    \n    remove(key) {\n        try {\n            localStorage.removeItem(key);\n        } catch (e) {\n            console.error('Storage remove error:', e);\n        }\n    },\n    \n    clear() {\n        try {\n            localStorage.clear();\n        } catch (e) {\n            console.error('Storage clear error:', e);\n        }\n    }\n};\n\n// 错误处理\nfunction handleError(error, userMessage = '操作失败，请重试') {\n    console.error('Error:', error);\n    showToast(userMessage, 'error');\n}\n\n// 确认对话框\nfunction confirmAction(message, callback) {\n    if (window.confirm(message)) {\n        callback();\n    }\n}\n\n// 数字格式化\nfunction formatNumber(num) {\n    return num.toLocaleString('zh-CN');\n}\n\n// 文件大小格式化\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n",
    mimeType: 'application/javascript; charset=utf-8'
  },
  '/js/api.js': {
    content: "/**\r\n * API 客户端\r\n */\r\n\r\n// API 配置 - 使用全局配置\r\nfunction getApiConfig() {\r\n    if (window.CDK_CONFIG) {\r\n        return {\r\n            baseUrl: window.CDK_CONFIG.API_BASE_URL + '/api',\r\n            timeout: window.CDK_CONFIG.REQUEST_TIMEOUT,\r\n            secretKey: window.CDK_CONFIG.API_SECRET_KEY,\r\n            retries: 3\r\n        };\r\n    }\r\n    // 回退配置\r\n    return {\r\n        baseUrl: '/api',\r\n        timeout: 30000,\r\n        secretKey: null,\r\n        retries: 3\r\n    };\r\n}\r\n\r\n// HTTP 客户端\r\nclass HttpClient {\r\n    constructor() {\r\n        this.config = getApiConfig();\r\n    }\r\n\r\n    async request(endpoint, options = {}) {\r\n        const url = `${this.config.baseUrl}${endpoint}`;\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n        };\r\n\r\n        // 添加安全密钥到请求头（当前已禁用）\r\n        if (this.config.secretKey && this.config.secretKey !== 'your-secret-key-here' && this.config.secretKey !== '') {\r\n            headers['X-API-Key'] = this.config.secretKey;\r\n        }\r\n\r\n        const config = {\r\n            method: 'GET',\r\n            headers,\r\n            ...options\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(url, config);\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || `HTTP ${response.status}: ${response.statusText}`);\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('API request failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async get(endpoint) {\r\n        return this.request(endpoint, { method: 'GET' });\r\n    }\r\n\r\n    async post(endpoint, data) {\r\n        return this.request(endpoint, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    async put(endpoint, data) {\r\n        return this.request(endpoint, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    async delete(endpoint, data = null) {\r\n        const options = { method: 'DELETE' };\r\n        if (data) {\r\n            options.body = JSON.stringify(data);\r\n        }\r\n        return this.request(endpoint, options);\r\n    }\r\n}\r\n\r\n// API 客户端实例\r\nconst apiClient = new HttpClient();\r\n\r\n// API 方法\r\nconst API = {\r\n    // 健康检查\r\n    async health() {\r\n        return apiClient.get('/health');\r\n    },\r\n\r\n    // 项目管理\r\n    projects: {\r\n        // 创建项目\r\n        async create(projectData) {\r\n            return apiClient.post('/projects', projectData);\r\n        },\r\n\r\n        // 获取项目列表\r\n        async list() {\r\n            return apiClient.get('/projects');\r\n        },\r\n\r\n        // 获取单个项目\r\n        async get(id) {\r\n            return apiClient.get(`/projects/${id}`);\r\n        },\r\n\r\n        // 更新项目\r\n        async update(id, updates) {\r\n            return apiClient.put(`/projects/${id}`, updates);\r\n        },\r\n\r\n        // 删除项目\r\n        async delete(id, data = null) {\r\n            return apiClient.delete(`/projects/${id}`, data);\r\n        },\r\n\r\n        // 添加卡密\r\n        async addCards(id, cardsData) {\r\n            return apiClient.post(`/projects/${id}/cards`, cardsData);\r\n        },\r\n\r\n        // 删除卡密\r\n        async deleteCard(projectId, cardId, adminPassword) {\r\n            return apiClient.delete(`/projects/${projectId}/cards/${cardId}`, { adminPassword });\r\n        },\r\n\r\n        // 切换项目状态（启用/禁用）\r\n        async toggleStatus(projectId, isActive, adminPassword) {\r\n            return apiClient.post(`/projects/${projectId}/toggle-status`, { isActive, adminPassword });\r\n        },\r\n\r\n        // 获取项目统计\r\n        async getStats(id, adminPassword) {\r\n            return apiClient.post(`/projects/${id}/stats`, { adminPassword });\r\n        },\r\n\r\n        // 验证管理密码\r\n        async verifyAdminPassword(projectId, adminPassword) {\r\n            return apiClient.post('/verify-admin', { projectId, adminPassword });\r\n        }\r\n    },\r\n\r\n    // 卡密领取\r\n    claim: {\r\n        // 验证密码\r\n        async verifyPassword(projectId, password) {\r\n            return apiClient.post('/verify', {\r\n                projectId,\r\n                password\r\n            });\r\n        },\r\n\r\n        // 领取卡密\r\n        async claimCard(projectId, claimData) {\r\n            return apiClient.post('/claim', {\r\n                projectId,\r\n                ...claimData\r\n            });\r\n        },\r\n\r\n        // 获取领取状态\r\n        async getStatus(projectId) {\r\n            return apiClient.get(`/claim/${projectId}`);\r\n        }\r\n    },\r\n\r\n    // 管理员功能\r\n    admin: {\r\n        // 获取用户列表\r\n        async getUsers() {\r\n            return apiClient.get('/admin/users');\r\n        },\r\n\r\n        // 获取用户统计\r\n        async getUserStats() {\r\n            return apiClient.get('/admin/users/stats');\r\n        },\r\n\r\n        // 封禁用户\r\n        async banUser(userId, reason) {\r\n            return apiClient.post('/admin/users/ban', { userId, reason });\r\n        },\r\n\r\n        // 解禁用户\r\n        async unbanUser(userId) {\r\n            return apiClient.post('/admin/users/unban', { userId });\r\n        }\r\n    }\r\n};\r\n\r\n// API 错误处理装饰器\r\nfunction withErrorHandling(apiMethod) {\r\n    return async function(...args) {\r\n        try {\r\n            showLoading();\r\n            const result = await apiMethod.apply(this, args);\r\n            hideLoading();\r\n            return result;\r\n        } catch (error) {\r\n            hideLoading();\r\n            \r\n            // 根据错误类型显示不同的消息\r\n            let message = '操作失败，请重试';\r\n            \r\n            if (error.message.includes('404')) {\r\n                message = '资源不存在';\r\n            } else if (error.message.includes('401')) {\r\n                message = '密码错误';\r\n            } else if (error.message.includes('403')) {\r\n                message = '访问被拒绝';\r\n            } else if (error.message.includes('410')) {\r\n                message = '卡密已全部领完';\r\n            } else if (error.message.includes('429')) {\r\n                message = '请求过于频繁，请稍后重试';\r\n            } else if (error.message.includes('500')) {\r\n                message = '服务器错误，请稍后重试';\r\n            } else if (error.message.includes('网络')) {\r\n                message = '网络连接失败，请检查网络';\r\n            }\r\n            \r\n            showToast(message, 'error');\r\n            throw error;\r\n        }\r\n    };\r\n}\r\n\r\n// 包装 API 方法以添加错误处理\r\nconst wrappedAPI = {\r\n    health: withErrorHandling(API.health),\r\n    \r\n    projects: {\r\n        create: withErrorHandling(API.projects.create),\r\n        list: withErrorHandling(API.projects.list),\r\n        get: withErrorHandling(API.projects.get),\r\n        update: withErrorHandling(API.projects.update),\r\n        delete: withErrorHandling(API.projects.delete),\r\n        addCards: withErrorHandling(API.projects.addCards),\r\n        deleteCard: withErrorHandling(API.projects.deleteCard),\r\n        toggleStatus: withErrorHandling(API.projects.toggleStatus),\r\n        getStats: withErrorHandling(API.projects.getStats),\r\n        verifyAdminPassword: withErrorHandling(API.projects.verifyAdminPassword)\r\n    },\r\n    \r\n    claim: {\r\n        verifyPassword: withErrorHandling(API.claim.verifyPassword),\r\n        claimCard: withErrorHandling(API.claim.claimCard),\r\n        getStatus: withErrorHandling(API.claim.getStatus)\r\n    }\r\n};\r\n\r\n// 导出 API\r\nwindow.API = wrappedAPI;\r\n",
    mimeType: 'application/javascript; charset=utf-8'
  },
  '/js/auth.js': {
    content: "/**\n * LinuxDoConnect Authentication Manager\n * Handles user authentication, session management, and login state\n */\n\nconsole.log('🔐 Auth Manager loaded');\n\nclass AuthManager {\n    constructor() {\n        this.currentUser = null;\n        this.isAuthenticated = false;\n        this.checkingAuth = false;\n        this.isAdmin = false;\n    }\n\n    /**\n     * Initialize authentication\n     * Check if user is already logged in\n     */\n    async init() {\n        console.log('[AUTH] Initializing authentication...');\n\n        try {\n            // Check URL for OAuth callback\n            const urlParams = new URLSearchParams(window.location.search);\n            const error = urlParams.get('error');\n\n            if (error) {\n                this.showError(`登录失败: ${decodeURIComponent(error)}`);\n                return false;\n            }\n\n            // Check if user is already authenticated\n            const authenticated = await this.checkAuth();\n\n            if (authenticated) {\n                console.log('[AUTH] User is authenticated:', this.currentUser?.username);\n                // If authenticated, remove login=required parameter\n                if (urlParams.has('login')) {\n                    urlParams.delete('login');\n                    const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');\n                    window.history.replaceState({}, '', newUrl);\n                }\n                return true;\n            } else {\n                console.log('[AUTH] User is not authenticated');\n                return false;\n            }\n        } catch (error) {\n            console.error('[AUTH] Init error:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Check if user is authenticated\n     */\n    async checkAuth() {\n        // If already checking, wait for the current check to complete\n        if (this.checkingAuth) {\n            console.log('[AUTH] Already checking auth, waiting...');\n            // Wait for the current check to complete\n            while (this.checkingAuth) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n            }\n            return this.isAuthenticated;\n        }\n\n        this.checkingAuth = true;\n\n        try {\n            const response = await fetch('/api/auth/userinfo', {\n                method: 'GET',\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                if (result.success && result.data) {\n                    this.currentUser = result.data;\n                    this.isAuthenticated = true;\n                    this.isAdmin = result.data.isAdmin || false;\n                    this.updateUI();\n                    return true;\n                }\n            }\n\n            this.isAuthenticated = false;\n            this.currentUser = null;\n            return false;\n        } catch (error) {\n            console.error('[AUTH] Check auth error:', error);\n            this.isAuthenticated = false;\n            this.currentUser = null;\n            return false;\n        } finally {\n            this.checkingAuth = false;\n        }\n    }\n\n    /**\n     * Redirect to login\n     */\n    async redirectToLogin(returnTo) {\n        try {\n            const currentPath = returnTo || window.location.pathname + window.location.search;\n            const encodedReturnTo = encodeURIComponent(currentPath);\n            \n            console.log('[AUTH] Getting login URL, return to:', currentPath);\n            \n            const response = await fetch(`/api/auth/login?return_to=${encodedReturnTo}`, {\n                method: 'GET',\n                credentials: 'include'\n            });\n\n            if (response.ok) {\n                const result = await response.json();\n                if (result.success && result.data.authUrl) {\n                    console.log('[AUTH] Redirecting to LinuxDo login...');\n                    window.location.href = result.data.authUrl;\n                    return;\n                }\n            }\n\n            throw new Error('Failed to get login URL');\n        } catch (error) {\n            console.error('[AUTH] Redirect to login error:', error);\n            this.showError('无法跳转到登录页面,请刷新重试');\n        }\n    }\n\n    /**\n     * Logout\n     */\n    async logout() {\n        try {\n            console.log('[AUTH] Logging out...');\n            \n            const response = await fetch('/api/auth/logout', {\n                method: 'POST',\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            this.isAuthenticated = false;\n            this.currentUser = null;\n            \n            // Redirect to home with login required\n            window.location.href = '/?login=required';\n        } catch (error) {\n            console.error('[AUTH] Logout error:', error);\n            this.showError('登出失败,请刷新重试');\n        }\n    }\n\n    /**\n     * Require authentication\n     * If not authenticated, redirect to login\n     */\n    async requireAuth() {\n        const authenticated = await this.checkAuth();\n\n        if (!authenticated) {\n            console.log('[AUTH] Authentication required, redirecting to login...');\n            await this.redirectToLogin();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if current user is admin\n     * Admin status is determined by backend API\n     */\n    checkIsAdmin() {\n        return this.isAdmin;\n    }\n\n    /**\n     * Update UI with user information\n     */\n    updateUI() {\n        if (!this.isAuthenticated || !this.currentUser) {\n            this.showLoginButton();\n            this.hideNavButtons();\n            return;\n        }\n\n        this.showUserInfo();\n        this.showNavButtons();\n    }\n\n    /**\n     * Show navigation buttons (home)\n     */\n    showNavButtons() {\n        const navHome = document.getElementById('nav-home');\n        if (navHome) navHome.style.display = '';\n    }\n\n    /**\n     * Hide navigation buttons (home)\n     */\n    hideNavButtons() {\n        const navHome = document.getElementById('nav-home');\n        if (navHome) navHome.style.display = 'none';\n    }\n\n    /**\n     * Show login button\n     */\n    showLoginButton() {\n        // Update navigation bar\n        const navUserInfoEl = document.getElementById('nav-user-info');\n        if (navUserInfoEl) {\n            navUserInfoEl.innerHTML = '';\n        }\n\n        // Update login page\n        const loginUserInfoEl = document.getElementById('login-user-info');\n        if (loginUserInfoEl) {\n            loginUserInfoEl.innerHTML = `\n                <button id=\"btn-login\" class=\"btn btn-primary\">\n                    <span>使用 Linux.do 登录</span>\n                </button>\n            `;\n\n            const loginBtn = document.getElementById('btn-login');\n            if (loginBtn) {\n                loginBtn.addEventListener('click', () => this.redirectToLogin());\n            }\n        }\n    }\n\n    /**\n     * Show user information\n     */\n    showUserInfo() {\n        const navUserInfoEl = document.getElementById('nav-user-info');\n        if (navUserInfoEl && this.currentUser) {\n            const avatarHtml = this.currentUser.avatarUrl\n                ? `<img src=\"${this.currentUser.avatarUrl}\" alt=\"${this.currentUser.username}\" class=\"user-avatar\">`\n                : `<div class=\"user-avatar-placeholder\">${this.currentUser.username.charAt(0).toUpperCase()}</div>`;\n\n            navUserInfoEl.innerHTML = `\n                <div class=\"user-info-container\">\n                    ${avatarHtml}\n                    <div class=\"user-details\">\n                        <span class=\"user-name\">${this.currentUser.name || this.currentUser.username}</span>\n                        <span class=\"user-username\">@${this.currentUser.username}</span>\n                    </div>\n                    <button id=\"btn-logout\" class=\"btn btn-secondary btn-sm\">登出</button>\n                </div>\n            `;\n\n            const logoutBtn = document.getElementById('btn-logout');\n            if (logoutBtn) {\n                logoutBtn.addEventListener('click', () => this.logout());\n            }\n        }\n\n        // Show/hide admin button based on admin status\n        const adminBtn = document.getElementById('nav-admin');\n        if (adminBtn) {\n            if (this.checkIsAdmin()) {\n                adminBtn.style.display = 'inline-block';\n            } else {\n                adminBtn.style.display = 'none';\n            }\n        }\n    }\n\n    /**\n     * Show error message\n     */\n    showError(message) {\n        console.error('[AUTH] Error:', message);\n        \n        // Try to show in UI if available\n        const errorEl = document.getElementById('auth-error');\n        if (errorEl) {\n            errorEl.textContent = message;\n            errorEl.style.display = 'block';\n            \n            setTimeout(() => {\n                errorEl.style.display = 'none';\n            }, 5000);\n        } else {\n            alert(message);\n        }\n    }\n\n    /**\n     * Get current user\n     */\n    getCurrentUser() {\n        return this.currentUser;\n    }\n\n    /**\n     * Check if authenticated\n     */\n    isLoggedIn() {\n        return this.isAuthenticated;\n    }\n}\n\n// Create global instance\nwindow.AuthManager = new AuthManager();\n\n// Note: Initialization is handled by app.js to avoid race conditions\n// Do not auto-initialize here\n\n",
    mimeType: 'application/javascript; charset=utf-8'
  },
  '/js/turnstile.js': {
    content: "/**\n * Cloudflare Turnstile 管理器 - 优化版本 v2.0\n * 负责按需加载、渲染和管理 Turnstile 验证组件\n * 基于官方最佳实践和 cloud-mail 项目优化\n * 只在领取密钥时验证，不在项目创建时验证\n */\n\n\n\nclass TurnstileManager {\n    constructor() {\n        this.config = {\n            SCRIPT_URL: 'https://challenges.cloudflare.com/turnstile/v0/api.js',\n            SITEVERIFY_URL: 'https://challenges.cloudflare.com/turnstile/v0/siteverify',\n            RETRY_ATTEMPTS: 3,\n            RETRY_DELAY: 1000,\n            LOAD_TIMEOUT: 10000\n        };\n\n        this.isLoaded = false;\n        this.isLoading = false;\n        this.isEnabled = false;\n        this.siteKey = '';\n        this.widgetId = null;\n        this.token = null;\n        this.retryCount = 0;\n        this.loadPromise = null;\n\n        this.callbacks = {\n            onSuccess: [],\n            onError: [],\n            onExpired: [],\n            onLoad: [],\n            onTimeout: []\n        };\n\n        // 错误代码映射\n        this.errorMessages = {\n            '100000': '网络连接失败，请检查网络连接',\n            '100001': '验证失败，请重试',\n            '100002': '验证超时，请重试',\n            '100003': '验证被拒绝，请重试',\n            '100004': '验证频率过高，请稍后重试',\n            '100005': '验证环境异常，请刷新页面重试',\n            '100006': '验证配置错误，请联系管理员',\n            '100007': '验证服务暂时不可用，请稍后重试',\n            '100008': '浏览器不支持，请更新浏览器',\n            '100009': '验证已过期，请重新验证',\n            '100010': '验证令牌无效，请重新验证'\n        };\n    }\n\n    /**\n     * 检查配置（不加载脚本）\n     */\n    async checkConfig() {\n        try {\n\n\n            // 获取服务器配置\n            const configResponse = await fetch('/api/turnstile/config');\n            const configData = await configResponse.json();\n\n            if (!configData.success) {\n                console.warn('[TURNSTILE] 获取配置失败:', configData.error);\n                return false;\n            }\n\n            this.isEnabled = configData.data.enabled;\n            this.siteKey = configData.data.siteKey;\n\n\n\n            return true;\n        } catch (error) {\n            console.error('[TURNSTILE] 配置检查失败:', error);\n            return false;\n        }\n    }\n\n    /**\n     * 按需初始化 Turnstile（只在需要时加载脚本）\n     */\n    async init() {\n        if (!this.isEnabled) {\n\n            return true;\n        }\n\n        if (!this.siteKey) {\n            console.warn('[TURNSTILE] 缺少 Site Key');\n            return false;\n        }\n\n        try {\n\n            await this.loadScript();\n            return true;\n        } catch (error) {\n            console.error('[TURNSTILE] 初始化失败:', error);\n            return false;\n        }\n    }\n\n    /**\n     * 加载 Turnstile 脚本（带重试和超时机制）\n     */\n    loadScript() {\n        // 如果已经在加载中，返回现有的 Promise\n        if (this.loadPromise) {\n            return this.loadPromise;\n        }\n\n        // 如果已经加载完成\n        if (this.isLoaded || window.turnstile) {\n\n            this.isLoaded = true;\n            this.triggerCallbacks('onLoad');\n            return Promise.resolve();\n        }\n\n\n        this.isLoading = true;\n\n        this.loadPromise = new Promise((resolve, reject) => {\n            const attemptLoad = (attempt = 1) => {\n                const script = document.createElement('script');\n                script.src = this.config.SCRIPT_URL;\n                script.async = true;\n                script.defer = true;\n\n                // 设置超时\n                const timeout = setTimeout(() => {\n                    script.remove();\n                    console.warn(`[TURNSTILE] 脚本加载超时 (尝试 ${attempt}/${this.config.RETRY_ATTEMPTS})`);\n\n                    if (attempt < this.config.RETRY_ATTEMPTS) {\n                        setTimeout(() => attemptLoad(attempt + 1), this.config.RETRY_DELAY);\n                    } else {\n                        this.isLoading = false;\n                        this.triggerCallbacks('onTimeout');\n                        reject(new Error('脚本加载超时'));\n                    }\n                }, this.config.LOAD_TIMEOUT);\n\n                script.onload = () => {\n                    clearTimeout(timeout);\n\n                    this.isLoaded = true;\n                    this.isLoading = false;\n                    this.triggerCallbacks('onLoad');\n                    resolve();\n                };\n\n                script.onerror = (error) => {\n                    clearTimeout(timeout);\n                    script.remove();\n                    console.error(`[TURNSTILE] 脚本加载失败 (尝试 ${attempt}/${this.config.RETRY_ATTEMPTS}):`, error);\n\n                    if (attempt < this.config.RETRY_ATTEMPTS) {\n                        setTimeout(() => attemptLoad(attempt + 1), this.config.RETRY_DELAY);\n                    } else {\n                        this.isLoading = false;\n                        reject(error);\n                    }\n                };\n\n                document.head.appendChild(script);\n            };\n\n            attemptLoad();\n        });\n\n        return this.loadPromise;\n    }\n\n    /**\n     * 渲染 Turnstile 组件（带加载状态和错误处理）\n     */\n    async render(container, options = {}) {\n        if (!this.isEnabled) {\n\n            return null;\n        }\n\n        if (!this.siteKey) {\n            console.warn('[TURNSTILE] 缺少 Site Key，无法渲染');\n            return null;\n        }\n\n        try {\n            // 显示加载状态\n            this.showLoadingState(container);\n\n            // 确保脚本已加载\n            if (!this.isLoaded || !window.turnstile) {\n\n                await this.loadScript();\n            }\n\n            // 隐藏加载状态\n            this.hideLoadingState(container);\n\n\n\n            const renderOptions = {\n                sitekey: this.siteKey,\n                callback: (token) => this.onSuccess(token),\n                'error-callback': (error) => this.onError(error),\n                'expired-callback': () => this.onExpired(),\n                theme: options.theme || 'auto',\n                size: options.size || 'normal',\n                ...options\n            };\n\n            this.widgetId = window.turnstile.render(container, renderOptions);\n\n\n            return this.widgetId;\n        } catch (error) {\n            console.error('[TURNSTILE] 渲染失败:', error);\n            this.hideLoadingState(container);\n            this.showErrorState(container, error);\n            return null;\n        }\n    }\n\n    /**\n     * 获取当前 token\n     */\n    getToken() {\n        if (!this.isEnabled) {\n            return null;\n        }\n\n        if (!this.isLoaded || !window.turnstile || !this.widgetId) {\n            return this.token;\n        }\n\n        try {\n            const token = window.turnstile.getResponse(this.widgetId);\n            this.token = token;\n            return token;\n        } catch (error) {\n            console.error('[TURNSTILE] 获取 token 失败:', error);\n            return this.token;\n        }\n    }\n\n    /**\n     * 重置组件\n     */\n    reset() {\n        if (!this.isEnabled || !this.isLoaded || !window.turnstile || !this.widgetId) {\n            return;\n        }\n\n        try {\n            window.turnstile.reset(this.widgetId);\n            this.token = null;\n\n        } catch (error) {\n            console.error('[TURNSTILE] 重置失败:', error);\n        }\n    }\n\n    /**\n     * 移除组件\n     */\n    remove() {\n        if (!this.isEnabled || !this.isLoaded || !window.turnstile || !this.widgetId) {\n            return;\n        }\n\n        try {\n            window.turnstile.remove(this.widgetId);\n            this.widgetId = null;\n            this.token = null;\n\n        } catch (error) {\n            console.error('[TURNSTILE] 移除失败:', error);\n        }\n    }\n\n    /**\n     * 成功回调\n     */\n    onSuccess(token) {\n\n        this.token = token;\n        this.callbacks.onSuccess.forEach(callback => {\n            try {\n                callback(token);\n            } catch (error) {\n                console.error('[TURNSTILE] 成功回调执行失败:', error);\n            }\n        });\n    }\n\n    /**\n     * 错误回调（增强错误处理）\n     */\n    onError(errorCode) {\n        console.error('[TURNSTILE] 验证失败:', errorCode);\n        this.token = null;\n\n        // 获取友好的错误消息\n        const errorMessage = this.getErrorMessage(errorCode);\n        console.error('[TURNSTILE] 错误详情:', errorMessage);\n\n        // 对于测试环境，某些错误是正常的\n        if (this.isTestEnvironment()) {\n\n            this.token = 'test-token-' + Date.now();\n            this.onSuccess(this.token);\n            return;\n        }\n\n        // 对于某些可重试的错误，自动重试\n        if (this.shouldRetry(errorCode) && this.retryCount < this.config.RETRY_ATTEMPTS) {\n            this.retryCount++;\n\n\n            setTimeout(() => {\n                this.reset();\n            }, this.config.RETRY_DELAY);\n            return;\n        }\n\n        // 重置重试计数\n        this.retryCount = 0;\n\n        this.callbacks.onError.forEach(callback => {\n            try {\n                callback(errorCode, errorMessage);\n            } catch (err) {\n                console.error('[TURNSTILE] 错误回调执行失败:', err);\n            }\n        });\n    }\n\n    /**\n     * 过期回调\n     */\n    onExpired() {\n        console.warn('[TURNSTILE] 验证已过期');\n        this.token = null;\n        this.callbacks.onExpired.forEach(callback => {\n            try {\n                callback();\n            } catch (error) {\n                console.error('[TURNSTILE] 过期回调执行失败:', error);\n            }\n        });\n    }\n\n    /**\n     * 添加事件监听器\n     */\n    addEventListener(event, callback) {\n        if (this.callbacks[event]) {\n            this.callbacks[event].push(callback);\n        }\n    }\n\n    /**\n     * 移除事件监听器\n     */\n    removeEventListener(event, callback) {\n        if (this.callbacks[event]) {\n            const index = this.callbacks[event].indexOf(callback);\n            if (index > -1) {\n                this.callbacks[event].splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * 检查是否已验证\n     */\n    isVerified() {\n        return this.isEnabled ? !!this.token : true;\n    }\n\n    /**\n     * 获取验证数据（用于表单提交）\n     */\n    getVerificationData() {\n        if (!this.isEnabled) {\n            return {};\n        }\n\n        return {\n            'cf-turnstile-response': this.getToken(),\n            turnstileToken: this.getToken()\n        };\n    }\n\n    // ========== 新增辅助方法 ==========\n\n    /**\n     * 获取友好的错误消息\n     */\n    getErrorMessage(errorCode) {\n        return this.errorMessages[errorCode] || `未知错误 (${errorCode})`;\n    }\n\n    /**\n     * 判断错误是否可重试\n     */\n    shouldRetry(errorCode) {\n        const retryableErrors = ['100000', '100002', '100004', '100007'];\n        return retryableErrors.includes(errorCode);\n    }\n\n    /**\n     * 触发回调\n     */\n    triggerCallbacks(event, ...args) {\n        if (this.callbacks[event]) {\n            this.callbacks[event].forEach(callback => {\n                try {\n                    callback(...args);\n                } catch (error) {\n                    console.error(`[TURNSTILE] ${event} 回调执行失败:`, error);\n                }\n            });\n        }\n    }\n\n    /**\n     * 显示加载状态\n     */\n    showLoadingState(container) {\n        const element = typeof container === 'string' ? document.querySelector(container) : container;\n        if (element) {\n            element.innerHTML = `\n                <div class=\"turnstile-loading\">\n                    <div class=\"loading-spinner\"></div>\n                    <div class=\"loading-text\">正在加载安全验证...</div>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * 隐藏加载状态\n     */\n    hideLoadingState(container) {\n        const element = typeof container === 'string' ? document.querySelector(container) : container;\n        if (element) {\n            const loading = element.querySelector('.turnstile-loading');\n            if (loading) {\n                loading.remove();\n            }\n        }\n    }\n\n    /**\n     * 显示错误状态\n     */\n    showErrorState(container, error) {\n        const element = typeof container === 'string' ? document.querySelector(container) : container;\n        if (element) {\n            element.innerHTML = `\n                <div class=\"turnstile-error\">\n                    <div class=\"error-icon\">⚠️</div>\n                    <div class=\"error-text\">验证组件加载失败</div>\n                    <button class=\"retry-btn\" onclick=\"window.TurnstileManager.retryRender('${container}')\">重试</button>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * 重试渲染\n     */\n    async retryRender(container) {\n        this.reset();\n        this.isLoaded = false;\n        this.loadPromise = null;\n        await this.render(container);\n    }\n\n    /**\n     * 预加载（在需要之前预先加载脚本）\n     */\n    async preload() {\n        if (!this.isEnabled || this.isLoaded || this.isLoading) {\n            return;\n        }\n\n        try {\n\n            await this.loadScript();\n        } catch (error) {\n            console.warn('[TURNSTILE] 预加载失败:', error);\n        }\n    }\n}\n\n// 创建全局实例\nwindow.TurnstileManager = new TurnstileManager();\n",
    mimeType: 'application/javascript; charset=utf-8'
  },
  '/js/app.js': {
    content: "/**\n * CDK 主应用逻辑 - 优化版本 v3.0\n * 集成 LinuxDoConnect 认证 + Turnstile 验证\n */\n\nconsole.log('🚀 CDK App v3.0 已加载 - LinuxDoConnect 认证版本');\n\nclass CDKApp {\n    constructor() {\n        this.currentProject = null;\n        this.currentEditProject = null;\n        this.projects = [];\n        this.importedCards = [];\n        this.authRequired = true; // 全站需要认证\n        this.init();\n    }\n\n    async init() {\n        console.log('[APP] Initializing CDK App...');\n\n        // 等待认证管理器初始化\n        if (window.AuthManager) {\n            const authenticated = await window.AuthManager.init();\n\n            if (!authenticated) {\n                console.log('[APP] User not authenticated');\n                // 所有页面都需要登录\n                if (this.authRequired) {\n                    console.log('[APP] Redirecting to login...');\n                    this.showLoginPage();\n                    return;\n                }\n            } else {\n                console.log('[APP] User authenticated:', window.AuthManager.getCurrentUser()?.username);\n                // 用户已认证,继续初始化应用\n            }\n        }\n\n        // 检查 Turnstile 配置（不加载脚本）\n        await this.checkTurnstileConfig();\n\n        this.bindEvents();\n        this.setupCardImport();\n        this.handleUrlParams();\n        this.loadProjects();\n    }\n\n    // 显示登录页面\n    showLoginPage() {\n        console.log('[APP] Showing login page');\n        showPage('#login-page');\n        // 显示登录按钮\n        if (window.AuthManager) {\n            window.AuthManager.showLoginButton();\n        }\n    }\n\n    // 检查 Turnstile 配置\n    async checkTurnstileConfig() {\n        try {\n            console.log('[APP] 正在检查 Turnstile 配置... (优化版本 v2.0)');\n            const success = await window.TurnstileManager.checkConfig();\n\n            if (success) {\n                console.log('[APP] Turnstile 配置检查完成');\n            } else {\n                console.log('[APP] Turnstile 配置检查失败');\n            }\n        } catch (error) {\n            console.error('[APP] Turnstile 配置检查失败:', error);\n        }\n    }\n\n    // 显示领取页面的 Turnstile 组件\n    async showClaimTurnstileWidget() {\n        if (!window.TurnstileManager.isEnabled) {\n            console.log('[APP] Turnstile 未启用，跳过验证');\n            return true;\n        }\n\n        const container = $('#claim-turnstile-container');\n        if (container) {\n            container.style.display = 'block';\n            container.classList.add('show');\n\n            try {\n                // 按需加载并渲染 Turnstile 组件\n                const widgetId = await window.TurnstileManager.render('#claim-turnstile-widget');\n                return !!widgetId;\n            } catch (error) {\n                console.error('[APP] Turnstile 渲染失败:', error);\n                return false;\n            }\n        }\n        return false;\n    }\n\n    // 隐藏领取页面的 Turnstile 组件\n    hideClaimTurnstileWidget() {\n        const container = $('#claim-turnstile-container');\n        if (container) {\n            container.style.display = 'none';\n            container.classList.remove('show');\n        }\n\n        // 移除 Turnstile 组件\n        window.TurnstileManager.remove();\n    }\n\n    bindEvents() {\n        // 导航事件\n        $('#nav-home')?.addEventListener('click', () => this.showHomePage());\n        $('#nav-admin')?.addEventListener('click', () => this.showAdminPage());\n\n        // 首页按钮\n        $('#btn-create-project')?.addEventListener('click', () => this.showCreatePage());\n        $('#btn-manage-projects')?.addEventListener('click', () => this.showManagePage());\n\n        // 返回首页按钮\n        $('#btn-back-home')?.addEventListener('click', () => this.showHomePage());\n        $('#btn-back-home-2')?.addEventListener('click', () => this.showHomePage());\n\n        // 创建项目表单\n        $('#create-form')?.addEventListener('submit', (e) => this.handleCreateProject(e));\n        $('#btn-clear-form')?.addEventListener('click', () => this.clearCreateForm());\n\n        // 卡密输入监听已移除，只在导入时更新计数\n\n        // 格式切换标签\n        $$('.tab-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => this.handleFormatChange(e));\n        });\n\n        // 密码验证表单\n        $('#verify-form')?.addEventListener('submit', (e) => this.handlePasswordVerify(e));\n\n        // 领取相关按钮\n        $('#btn-copy-card')?.addEventListener('click', () => this.copyClaimedCard());\n        $('#btn-retry')?.addEventListener('click', () => this.showPasswordForm());\n\n        // 空状态按钮\n        $('#btn-create-first')?.addEventListener('click', () => this.showCreatePage());\n    }\n\n    handleUrlParams() {\n        const params = getUrlParams();\n\n        // 如果有项目ID参数，显示领取页面\n        if (params.project) {\n            this.showClaimPage(params.project);\n        } else {\n            // 没有参数，显示首页\n            this.showHomePage();\n        }\n    }\n\n    // 页面切换方法\n    async showHomePage() {\n        // 检查认证\n        if (this.authRequired && !await this.checkAuth()) {\n            return;\n        }\n        showPage('#home-page');\n        setUrlParams({ project: null });\n    }\n\n    async showCreatePage() {\n        // 检查认证\n        if (this.authRequired && !await this.checkAuth()) {\n            return;\n        }\n        showPage('#create-page');\n        this.clearCreateForm();\n    }\n\n    async showManagePage() {\n        // 检查认证\n        if (this.authRequired && !await this.checkAuth()) {\n            return;\n        }\n        showPage('#manage-page');\n        this.loadProjects();\n    }\n\n    async showAdminPage() {\n        // 检查认证和管理员权限\n        if (this.authRequired && !await this.checkAuth()) {\n            return;\n        }\n\n        if (!window.AuthManager || !window.AuthManager.checkIsAdmin()) {\n            showToast('需要管理员权限', 'error');\n            this.showHomePage();\n            return;\n        }\n\n        showPage('#admin-page');\n        await this.loadAdminData();\n    }\n\n    // 检查认证状态\n    async checkAuth() {\n        if (!window.AuthManager) {\n            console.error('[APP] AuthManager not available');\n            return false;\n        }\n\n        const authenticated = await window.AuthManager.checkAuth();\n\n        if (!authenticated) {\n            console.log('[APP] Not authenticated, redirecting to login');\n            await window.AuthManager.redirectToLogin();\n            return false;\n        }\n\n        return true;\n    }\n\n    async showClaimPage(projectId) {\n        showPage('#claim-page');\n        this.currentProject = projectId;\n        this.showPasswordForm();\n        setUrlParams({ project: projectId });\n\n        // 显示 Turnstile 验证组件\n        await this.showClaimTurnstileWidget();\n    }\n\n    // 创建项目相关方法\n    clearCreateForm() {\n        clearForm('#create-form');\n        // 重置格式标签\n        $$('.tab-btn').forEach(btn => btn.classList.remove('active'));\n        $('.tab-btn[data-format=\"text\"]')?.classList.add('active');\n        this.updateCardsPlaceholder('text');\n        // 清空导入的卡密列表\n        this.importedCards = [];\n        this.displayImportedCards();\n        this.updateCardsCount();\n    }\n\n    handleFormatChange(e) {\n        e.preventDefault();\n        const format = e.target.dataset.format;\n\n        // 更新标签状态\n        $$('.tab-btn').forEach(btn => btn.classList.remove('active'));\n        e.target.classList.add('active');\n\n        // 更新占位符\n        this.updateCardsPlaceholder(format);\n\n        // 更新卡密计数\n        this.updateCardsCount();\n    }\n\n    updateCardsPlaceholder(format) {\n        const textarea = $('#cards-input');\n        if (!textarea) return;\n\n        const placeholders = {\n            text: '请输入卡密内容，每行一个卡密\\n例如：\\nABCD-1234-EFGH\\nIJKL-5678-MNOP',\n            csv: '请输入卡密内容，用逗号分隔\\n例如：ABCD-1234-EFGH,IJKL-5678-MNOP,QRST-9012-UVWX',\n            json: '请输入JSON格式的卡密内容\\n例如：\\n[\"ABCD-1234-EFGH\", \"IJKL-5678-MNOP\"]\\n或：\\n[{\"user\":\"test1\",\"pass\":\"123\"}, {\"user\":\"test2\",\"pass\":\"456\"}]'\n        };\n\n        textarea.placeholder = placeholders[format] || placeholders.text;\n    }\n\n    async handleCreateProject(e) {\n        e.preventDefault();\n\n        if (!validateForm('#create-form')) {\n            showToast('请填写所有必填字段', 'error');\n            return;\n        }\n\n        try {\n            const name = $('#project-name').value.trim();\n            const password = $('#project-password').value;\n            const adminPassword = $('#admin-password').value;\n            const description = $('#project-description').value.trim();\n            const cardsInput = $('#cards-input').value.trim();\n            const removeDuplicatesChecked = $('#remove-duplicates').checked;\n\n            // 获取当前选中的格式\n            const activeTab = $('.tab-btn.active');\n            const format = activeTab ? activeTab.dataset.format : 'text';\n\n            // 只使用已导入列表的卡密数据\n            let cards = [];\n\n            // 只使用导入列表中的卡密\n            if (this.importedCards && this.importedCards.length > 0) {\n                cards = [...this.importedCards]; // 复制数组\n            }\n\n            if (cards.length === 0) {\n                showToast('请先导入卡密数据', 'error');\n                return;\n            }\n\n            // 去重处理\n            if (removeDuplicatesChecked) {\n                const originalCount = cards.length;\n                cards = removeDuplicates(cards);\n                if (cards.length < originalCount) {\n                    showToast(`已去除 ${originalCount - cards.length} 个重复卡密`, 'info');\n                }\n            }\n\n            // 获取领取限制设置\n            const limitOnePerUser = $('#limit-one-per-user').checked;\n\n            // 创建项目\n            const projectData = {\n                name,\n                password,\n                adminPassword,\n                description: description || undefined,\n                limitOnePerUser,\n                cards\n            };\n\n            // 项目创建不需要 Turnstile 验证\n\n            const result = await API.projects.create(projectData);\n            \n            if (result.success) {\n                showToast('项目创建成功', 'success');\n                this.clearCreateForm();\n                this.showManagePage();\n            }\n\n        } catch (error) {\n            // 错误已在 API 层处理\n        }\n    }\n\n    // 项目管理相关方法\n    async loadProjects() {\n        try {\n            show('#projects-loading');\n            hide('#projects-list');\n            hide('#projects-empty');\n\n            const result = await API.projects.list();\n            \n            if (result.success) {\n                this.projects = result.data || [];\n                this.renderProjects();\n            }\n\n        } catch (error) {\n            // 错误已在 API 层处理\n            this.projects = [];\n            this.renderProjects();\n        } finally {\n            hide('#projects-loading');\n        }\n    }\n\n    renderProjects() {\n        const container = $('#projects-list');\n        const emptyState = $('#projects-empty');\n\n        if (this.projects.length === 0) {\n            hide(container);\n            show(emptyState);\n            return;\n        }\n\n        hide(emptyState);\n        show(container);\n\n        container.innerHTML = this.projects.map(project => this.renderProjectCard(project)).join('');\n\n        // 绑定项目卡片事件\n        this.bindProjectCardEvents();\n    }\n\n    renderProjectCard(project) {\n        const remainingCards = project.totalCards - project.claimedCards;\n        const progressPercent = project.totalCards > 0 ? \n            Math.round((project.claimedCards / project.totalCards) * 100) : 0;\n\n        return `\n            <div class=\"project-card\" data-project-id=\"${project.id}\">\n                <div class=\"project-header\">\n                    <div>\n                        <div class=\"project-title\">${project.name}</div>\n                        <div class=\"project-description\">${project.description || '无描述'}</div>\n                    </div>\n                    <div class=\"project-status ${project.isActive ? 'status-active' : 'status-inactive'}\">\n                        ${project.isActive ? '启用' : '停用'}\n                    </div>\n                </div>\n                \n                <div class=\"project-stats\">\n                    <div class=\"stat-item\">\n                        <div class=\"stat-value\">${formatNumber(project.totalCards)}</div>\n                        <div class=\"stat-label\">总卡密</div>\n                    </div>\n                    <div class=\"stat-item\">\n                        <div class=\"stat-value\">${formatNumber(project.claimedCards)}</div>\n                        <div class=\"stat-label\">已领取</div>\n                    </div>\n                    <div class=\"stat-item\">\n                        <div class=\"stat-value\">${formatNumber(remainingCards)}</div>\n                        <div class=\"stat-label\">剩余</div>\n                    </div>\n                </div>\n\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" style=\"width: ${progressPercent}%\"></div>\n                </div>\n\n                <div class=\"project-actions\">\n                    <button class=\"btn btn-primary btn-view-link\" data-project-id=\"${project.id}\">\n                        查看链接\n                    </button>\n                    <button class=\"btn btn-secondary btn-view-stats\" data-project-id=\"${project.id}\">\n                        查看统计\n                    </button>\n                    <button class=\"btn btn-secondary btn-edit-project\" data-project-id=\"${project.id}\">\n                        编辑\n                    </button>\n                    <button class=\"btn btn-danger btn-delete-project\" data-project-id=\"${project.id}\">\n                        删除\n                    </button>\n                </div>\n\n                <div class=\"project-meta\">\n                    <small>创建时间: ${formatDate(project.createdAt)}</small>\n                </div>\n            </div>\n        `;\n    }\n\n    bindProjectCardEvents() {\n        // 查看链接按钮\n        $$('.btn-view-link').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const projectId = e.target.dataset.projectId;\n                this.showProjectLink(projectId);\n            });\n        });\n\n        // 查看统计按钮\n        $$('.btn-view-stats').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const projectId = e.target.dataset.projectId;\n                this.showProjectStats(projectId);\n            });\n        });\n\n        // 编辑项目按钮\n        $$('.btn-edit-project').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const projectId = e.target.dataset.projectId;\n                this.editProject(projectId);\n            });\n        });\n\n        // 删除项目按钮\n        $$('.btn-delete-project').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const projectId = e.target.dataset.projectId;\n                this.deleteProject(projectId);\n            });\n        });\n    }\n\n    showProjectLink(projectId) {\n        const project = this.projects.find(p => p.id === projectId);\n        if (!project) return;\n\n        const baseUrl = window.location.origin + window.location.pathname;\n        const projectUrl = `${baseUrl}?project=${projectId}`;\n\n        const message = `项目链接已复制到剪贴板：\\n${projectUrl}`;\n        copyToClipboard(projectUrl);\n        alert(message);\n    }\n\n    async showProjectStats(projectId) {\n        // 显示管理密码输入对话框\n        this.showAdminPasswordModal(projectId, async (adminPassword) => {\n            try {\n                const result = await API.projects.getStats(projectId, adminPassword);\n                if (result.success) {\n                    this.displayStatsModal(result.data);\n                }\n            } catch (error) {\n                // 错误已在 API 层处理\n            }\n        });\n    }\n\n    displayStatsModal(stats) {\n        const modal = document.createElement('div');\n        modal.className = 'modal-overlay';\n        modal.innerHTML = `\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h3>项目统计</h3>\n                    <button class=\"modal-close\">&times;</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div class=\"stats-summary\">\n                        <div class=\"stat-item\">\n                            <div class=\"stat-value\">${formatNumber(stats.totalCards)}</div>\n                            <div class=\"stat-label\">总卡密数</div>\n                        </div>\n                        <div class=\"stat-item\">\n                            <div class=\"stat-value\">${formatNumber(stats.claimedCards)}</div>\n                            <div class=\"stat-label\">已领取</div>\n                        </div>\n                        <div class=\"stat-item\">\n                            <div class=\"stat-value\">${formatNumber(stats.remainingCards)}</div>\n                            <div class=\"stat-label\">剩余</div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"claim-history\">\n                        <h4>领取记录</h4>\n                        ${stats.claimHistory.length > 0 ?\n                            stats.claimHistory.map(record => `\n                                <div class=\"claim-record\">\n                                    <div class=\"claim-time\">${formatDate(record.claimedAt)}</div>\n                                    <div class=\"claim-user\">${record.username || '未知用户'}</div>\n                                    <div class=\"claim-card\">${record.cardContent}</div>\n                                </div>\n                            `).join('') :\n                            '<p>暂无领取记录</p>'\n                        }\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n\n        // 绑定关闭事件\n        modal.querySelector('.modal-close').addEventListener('click', () => {\n            document.body.removeChild(modal);\n            // 刷新项目列表以显示更新后的统计数据\n            this.loadProjects();\n        });\n\n        modal.addEventListener('click', (e) => {\n            if (e.target === modal) {\n                document.body.removeChild(modal);\n                // 刷新项目列表以显示更新后的统计数据\n                this.loadProjects();\n            }\n        });\n    }\n\n    showAdminPasswordModal(projectId, onSuccess) {\n        const modal = document.createElement('div');\n        modal.className = 'modal-overlay';\n        modal.innerHTML = `\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h3>验证管理密码</h3>\n                    <button class=\"modal-close\">&times;</button>\n                </div>\n                <div class=\"modal-body\">\n                    <form id=\"admin-password-form\">\n                        <div class=\"form-group\">\n                            <label for=\"admin-password-input\">管理密码</label>\n                            <input type=\"password\" id=\"admin-password-input\" required\n                                   placeholder=\"请输入管理密码\" autocomplete=\"off\">\n                        </div>\n                        <div class=\"form-actions\">\n                            <button type=\"button\" class=\"btn btn-secondary modal-cancel\">取消</button>\n                            <button type=\"submit\" class=\"btn btn-primary\">确认</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n\n        const form = modal.querySelector('#admin-password-form');\n        const input = modal.querySelector('#admin-password-input');\n        const closeModal = () => {\n            document.body.removeChild(modal);\n        };\n\n        // 绑定关闭事件\n        modal.querySelector('.modal-close').addEventListener('click', closeModal);\n        modal.querySelector('.modal-cancel').addEventListener('click', closeModal);\n\n        modal.addEventListener('click', (e) => {\n            if (e.target === modal) {\n                closeModal();\n            }\n        });\n\n        // 绑定表单提交事件\n        form.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            const adminPassword = input.value.trim();\n\n            if (!adminPassword) {\n                showToast('请输入管理密码', 'error');\n                return;\n            }\n\n            closeModal();\n            await onSuccess(adminPassword);\n        });\n\n        // 自动聚焦输入框\n        setTimeout(() => input.focus(), 100);\n    }\n\n    async editProject(projectId) {\n        const project = this.projects.find(p => p.id === projectId);\n        if (!project) return;\n\n        // 先验证管理密码\n        const adminPassword = prompt(`请输入项目 \"${project.name}\" 的管理密码：`);\n        if (!adminPassword) {\n            return; // 用户取消\n        }\n\n        try {\n            // 验证管理密码\n            const verifyResult = await API.projects.verifyAdminPassword(projectId, adminPassword);\n            if (!verifyResult.success || !verifyResult.data.valid) {\n                showToast('管理密码错误', 'error');\n                return;\n            }\n\n            // 密码正确，显示编辑模态框\n            this.currentEditProject = { ...project, adminPassword };\n            await this.showEditProjectModal(projectId, adminPassword);\n        } catch (error) {\n            showToast(error.message || '验证管理密码失败', 'error');\n        }\n    }\n\n    async showEditProjectModal(projectId, adminPassword) {\n        const modal = $('#edit-project-modal');\n        const project = this.currentEditProject;\n\n        // 设置项目状态开关\n        const statusToggle = $('#project-status-toggle');\n        const statusText = $('#project-status-text');\n        statusToggle.checked = project.isActive;\n        statusText.textContent = project.isActive ? '项目已启用' : '项目已禁用';\n\n        // 设置项目描述\n        const descriptionTextarea = $('#edit-project-description');\n        descriptionTextarea.value = project.description || '';\n\n        // 添加状态切换事件\n        statusToggle.onchange = async () => {\n            await this.toggleProjectStatus(projectId, statusToggle.checked, adminPassword);\n        };\n\n        // 加载项目统计和卡密列表\n        await this.loadProjectCardsForEdit(projectId, adminPassword);\n\n        // 显示模态框\n        modal.style.display = 'flex';\n    }\n\n    async loadProjectCardsForEdit(projectId, adminPassword) {\n        try {\n            const statsResult = await API.projects.getStats(projectId, adminPassword);\n            if (statsResult.success) {\n                const stats = statsResult.data;\n\n                // 更新统计信息\n                $('#edit-total-cards').textContent = stats.totalCards;\n                $('#edit-claimed-cards').textContent = stats.claimedCards;\n                $('#edit-remaining-cards').textContent = stats.remainingCards;\n\n                // 显示卡密列表\n                this.displayEditCardsList(stats.claimHistory, projectId, adminPassword);\n            }\n        } catch (error) {\n            showToast(error.message || '加载卡密列表失败', 'error');\n        }\n    }\n\n    displayEditCardsList(claimHistory, projectId, adminPassword) {\n        const listEl = $('#edit-cards-list');\n\n        if (!claimHistory || claimHistory.length === 0) {\n            listEl.innerHTML = '<p class=\"empty-state\">暂无卡密</p>';\n            return;\n        }\n\n        const html = claimHistory.map(record => {\n            const isClaimed = !!record.claimedAt;\n            const statusClass = isClaimed ? 'claimed' : 'available';\n            const statusText = isClaimed ? '已领取' : '未领取';\n            const deleteButton = isClaimed\n                ? ''\n                : `<button class=\"btn btn-danger btn-sm\" onclick=\"app.deleteCard('${projectId}', '${record.id}', '${adminPassword}')\">删除</button>`;\n\n            return `\n                <div class=\"card-item ${statusClass}\">\n                    <div class=\"card-content\">${record.cardContent}</div>\n                    <span class=\"card-status ${statusClass}\">${statusText}</span>\n                    <div class=\"card-actions\">\n                        ${deleteButton}\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        listEl.innerHTML = html;\n    }\n\n    async addNewCards() {\n        const textarea = $('#new-cards-input');\n        const cardsText = textarea.value.trim();\n\n        if (!cardsText) {\n            showToast('请输入卡密', 'error');\n            return;\n        }\n\n        const cards = cardsText.split('\\n').map(c => c.trim()).filter(c => c);\n        if (cards.length === 0) {\n            showToast('请输入有效的卡密', 'error');\n            return;\n        }\n\n        const { id: projectId, adminPassword } = this.currentEditProject;\n\n        try {\n            const result = await API.projects.addCards(projectId, {\n                cards,\n                adminPassword,\n                removeDuplicates: true\n            });\n\n            if (result.success) {\n                showToast(`成功添加 ${result.data.added} 个卡密`, 'success');\n                textarea.value = '';\n                // 重新加载卡密列表\n                await this.loadProjectCardsForEdit(projectId, adminPassword);\n                // 重新加载项目列表以更新统计\n                await this.loadProjects();\n            }\n        } catch (error) {\n            showToast(error.message || '添加卡密失败', 'error');\n        }\n    }\n\n    async deleteCard(projectId, cardId, adminPassword) {\n        if (!confirm('确定要删除这个卡密吗？')) {\n            return;\n        }\n\n        try {\n            const result = await API.projects.deleteCard(projectId, cardId, adminPassword);\n            if (result.success) {\n                showToast('卡密删除成功', 'success');\n                // 重新加载卡密列表\n                await this.loadProjectCardsForEdit(projectId, adminPassword);\n                // 重新加载项目列表以更新统计\n                await this.loadProjects();\n            }\n        } catch (error) {\n            showToast(error.message || '删除卡密失败', 'error');\n        }\n    }\n\n    async toggleProjectStatus(projectId, isActive, adminPassword) {\n        try {\n            const result = await API.projects.toggleStatus(projectId, isActive, adminPassword);\n            if (result.success) {\n                const statusText = $('#project-status-text');\n                statusText.textContent = isActive ? '项目已启用' : '项目已禁用';\n                showToast(result.data.message, 'success');\n                // 更新当前编辑项目的状态\n                this.currentEditProject.isActive = isActive;\n                // 重新加载项目列表\n                await this.loadProjects();\n            }\n        } catch (error) {\n            // 恢复开关状态\n            const statusToggle = $('#project-status-toggle');\n            statusToggle.checked = !isActive;\n            showToast(error.message || '更新项目状态失败', 'error');\n        }\n    }\n\n    async updateProjectDescription() {\n        if (!this.currentEditProject) return;\n\n        const descriptionTextarea = $('#edit-project-description');\n        const newDescription = descriptionTextarea.value.trim();\n        const projectId = this.currentEditProject.id;\n        const adminPassword = this.currentEditProject.adminPassword;\n\n        try {\n            const result = await API.projects.update(projectId, {\n                adminPassword,\n                description: newDescription\n            });\n\n            if (result.success) {\n                showToast('项目描述更新成功', 'success');\n                // 更新当前编辑项目的描述\n                this.currentEditProject.description = newDescription;\n                // 重新加载项目列表\n                await this.loadProjects();\n            }\n        } catch (error) {\n            showToast(error.message || '更新项目描述失败', 'error');\n        }\n    }\n\n    closeEditProjectModal() {\n        const modal = $('#edit-project-modal');\n        modal.style.display = 'none';\n        this.currentEditProject = null;\n    }\n\n    async deleteProject(projectId) {\n        const project = this.projects.find(p => p.id === projectId);\n        if (!project) return;\n\n        // 先询问管理密码\n        const adminPassword = prompt(`请输入项目 \"${project.name}\" 的管理密码：`);\n        if (!adminPassword) {\n            return; // 用户取消\n        }\n\n        if (confirm(`确定要删除项目 \"${project.name}\" 吗？此操作不可恢复。`)) {\n            try {\n                const result = await API.projects.delete(projectId, { adminPassword });\n                if (result.success) {\n                    showToast('项目删除成功', 'success');\n                    this.loadProjects();\n                }\n            } catch (error) {\n                // 特殊处理管理密码错误\n                if (error.message.includes('管理密码错误') || error.message.includes('401')) {\n                    showToast('管理密码错误，请重新输入', 'error');\n                } else {\n                    showToast(error.message || '删除项目失败', 'error');\n                }\n            }\n        }\n    }\n\n    // 卡密领取相关方法\n    showPasswordForm() {\n        hide('#claim-result');\n        show('#password-form');\n        $('#claim-password').value = '';\n        $('#claim-password').focus();\n    }\n\n    async handlePasswordVerify(e) {\n        e.preventDefault();\n\n        const password = $('#claim-password').value;\n        if (!password) {\n            showToast('请输入密码', 'error');\n            return;\n        }\n\n        try {\n            const result = await API.claim.verifyPassword(this.currentProject, password);\n\n            if (result.success && result.data.valid) {\n                // 密码正确，尝试领取卡密\n                await this.attemptClaimCard(password);\n            } else {\n                showToast('密码错误', 'error');\n                $('#claim-password').value = '';\n                $('#claim-password').focus();\n            }\n\n        } catch (error) {\n            // 错误已在 API 层处理\n        }\n    }\n\n    async attemptClaimCard(password) {\n        try {\n            // 检查 Turnstile 验证\n            if (window.TurnstileManager.isEnabled && !window.TurnstileManager.isVerified()) {\n                showToast('请完成安全验证', 'error');\n                return;\n            }\n\n            // 准备请求数据\n            const claimData = { password };\n\n            // 添加 Turnstile 验证数据\n            if (window.TurnstileManager.isEnabled) {\n                const turnstileData = window.TurnstileManager.getVerificationData();\n                Object.assign(claimData, turnstileData);\n            }\n\n            const result = await API.claim.claimCard(this.currentProject, claimData);\n\n            if (result.success && result.data.success) {\n                this.showClaimSuccess(result.data);\n                // 隐藏 Turnstile 组件\n                this.hideClaimTurnstileWidget();\n            } else {\n                this.showClaimError(result.data.message || '领取失败');\n                // 重置 Turnstile\n                window.TurnstileManager.reset();\n            }\n\n        } catch (error) {\n            this.showClaimError('领取失败，请重试');\n            // 重置 Turnstile\n            window.TurnstileManager.reset();\n        }\n    }\n\n    showClaimSuccess(claimData) {\n        hide('#password-form');\n        show('#claim-result');\n        show('#claim-success');\n        hide('#claim-error');\n\n        const cardDisplay = $('#claimed-card');\n        if (cardDisplay) {\n            cardDisplay.textContent = claimData.card;\n        }\n\n        // 如果是重复领取，显示提示\n        if (claimData.alreadyClaimed) {\n            showToast('您之前已经领取过了', 'info');\n        } else {\n            showToast('领取成功！', 'success');\n        }\n    }\n\n    showClaimError(message) {\n        hide('#password-form');\n        show('#claim-result');\n        hide('#claim-success');\n        show('#claim-error');\n\n        const errorMessage = $('#error-message');\n        if (errorMessage) {\n            errorMessage.textContent = message;\n        }\n    }\n\n    copyClaimedCard() {\n        const cardDisplay = $('#claimed-card');\n        if (cardDisplay && cardDisplay.textContent) {\n            copyToClipboard(cardDisplay.textContent);\n        }\n    }\n\n    // 设置卡密导入功能\n    setupCardImport() {\n        // 初始化计数\n        this.updateCardsCount();\n    }\n\n    // 处理卡密导入（解析文本框内容）\n    handleCardImport() {\n        const cardsInput = $('#cards-input');\n        if (!cardsInput) return;\n\n        const content = cardsInput.value.trim();\n        if (!content) {\n            this.showMessage('请先输入卡密内容', 'warning');\n            return;\n        }\n\n        // 根据当前格式解析内容\n        const activeTab = $('.tab-btn.active');\n        const format = activeTab?.dataset.format || 'text';\n\n        let cards = [];\n        let errorMessage = '';\n\n        try {\n            switch (format) {\n                case 'text':\n                    cards = content.split('\\n')\n                        .map(line => line.trim())\n                        .filter(line => line);\n                    break;\n\n                case 'csv':\n                    cards = content.split(/[,，]/)\n                        .map(item => item.trim())\n                        .filter(item => item);\n                    break;\n\n                case 'json':\n                    const parsed = JSON.parse(content);\n                    if (Array.isArray(parsed)) {\n                        cards = parsed;\n                    } else {\n                        cards = [parsed];\n                    }\n                    break;\n\n                default:\n                    cards = content.split('\\n')\n                        .map(line => line.trim())\n                        .filter(line => line);\n            }\n\n            // 去重处理\n            const removeDuplicates = $('#remove-duplicates')?.checked;\n            if (removeDuplicates) {\n                const originalCount = cards.length;\n                cards = [...new Set(cards.map(card =>\n                    typeof card === 'string' ? card : JSON.stringify(card)\n                ))].map(card => {\n                    try {\n                        return JSON.parse(card);\n                    } catch {\n                        return card;\n                    }\n                });\n                const duplicateCount = originalCount - cards.length;\n                if (duplicateCount > 0) {\n                    this.showMessage(`已去除 ${duplicateCount} 条重复卡密`, 'info');\n                }\n            }\n\n            // 存储到内存（这里可以扩展为存储到变量或进行其他处理）\n            this.importedCards = cards;\n\n            this.showMessage(`成功导入 ${cards.length} 条卡密`, 'success');\n            this.updateCardsCount();\n            this.displayImportedCards();\n\n        } catch (error) {\n            errorMessage = `解析失败：${error.message}`;\n            this.showMessage(errorMessage, 'error');\n        }\n    }\n\n    // 显示导入的卡密列表\n    displayImportedCards() {\n        const listContainer = $('#imported-cards-list');\n        const cardsContainer = $('#cards-container');\n        const countSpan = $('#imported-count');\n\n        if (!listContainer || !cardsContainer || !countSpan) return;\n\n        if (!this.importedCards || this.importedCards.length === 0) {\n            listContainer.style.display = 'none';\n            return;\n        }\n\n        // 显示列表容器\n        listContainer.style.display = 'block';\n\n        // 更新计数\n        countSpan.textContent = this.importedCards.length;\n\n        // 清空现有内容\n        cardsContainer.innerHTML = '';\n\n        // 生成卡密项\n        this.importedCards.forEach((card, index) => {\n            const cardItem = document.createElement('div');\n            cardItem.className = 'card-item';\n            cardItem.innerHTML = `\n                <div class=\"card-content\">${this.escapeHtml(String(card))}</div>\n                <button class=\"card-delete\" onclick=\"window.app.deleteImportedCard(${index})\">删除</button>\n            `;\n            cardsContainer.appendChild(cardItem);\n        });\n    }\n\n    // 删除单个导入的卡密\n    deleteImportedCard(index) {\n        if (!this.importedCards || index < 0 || index >= this.importedCards.length) {\n            return;\n        }\n\n        // 从数组中删除\n        this.importedCards.splice(index, 1);\n\n        // 重新显示列表\n        this.displayImportedCards();\n\n        // 更新计数\n        this.updateCardsCount();\n\n        this.showMessage('已删除卡密', 'info');\n    }\n\n    // 清空所有导入的卡密\n    clearImportedCards() {\n        if (!this.importedCards || this.importedCards.length === 0) {\n            this.showMessage('没有可清空的卡密', 'warning');\n            return;\n        }\n\n        if (confirm(`确定要清空所有 ${this.importedCards.length} 条导入的卡密吗？`)) {\n            this.importedCards = [];\n            this.displayImportedCards();\n            this.updateCardsCount();\n            this.showMessage('已清空所有导入的卡密', 'info');\n        }\n    }\n\n    // HTML 转义函数\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    // 更新卡密计数\n    updateCardsCount() {\n        const countDisplay = $('#cardsCount');\n\n        if (!countDisplay) return;\n\n        // 只计算导入列表中的卡密数量\n        const importedCount = this.importedCards ? this.importedCards.length : 0;\n\n        if (importedCount === 0) {\n            countDisplay.textContent = '0 条卡密';\n        } else {\n            countDisplay.textContent = `${importedCount} 条卡密 (已导入)`;\n        }\n    }\n\n    // 显示消息提示\n    showMessage(message, type = 'info') {\n        // 创建消息元素\n        const messageEl = document.createElement('div');\n        messageEl.className = `message message-${type}`;\n        messageEl.textContent = message;\n\n        // 添加样式\n        messageEl.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 12px 20px;\n            border-radius: 4px;\n            color: white;\n            font-weight: 500;\n            z-index: 10000;\n            max-width: 300px;\n            word-wrap: break-word;\n            animation: slideInRight 0.3s ease;\n        `;\n\n        // 根据类型设置颜色\n        switch (type) {\n            case 'success':\n                messageEl.style.backgroundColor = '#10b981';\n                break;\n            case 'error':\n                messageEl.style.backgroundColor = '#ef4444';\n                break;\n            case 'warning':\n                messageEl.style.backgroundColor = '#f59e0b';\n                break;\n            default:\n                messageEl.style.backgroundColor = '#3b82f6';\n        }\n\n        // 添加到页面\n        document.body.appendChild(messageEl);\n\n        // 3秒后自动移除\n        setTimeout(() => {\n            if (messageEl.parentNode) {\n                messageEl.style.animation = 'slideOutRight 0.3s ease';\n                setTimeout(() => {\n                    messageEl.remove();\n                }, 300);\n            }\n        }, 3000);\n    }\n}\n\n// 初始化应用\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.app = new CDKApp();\n});\n\n// 添加模态框样式\nconst modalStyles = `\n<style>\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n}\n\n.modal-content {\n    background: white;\n    border-radius: var(--border-radius);\n    max-width: 600px;\n    width: 90%;\n    max-height: 80vh;\n    overflow-y: auto;\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem;\n    border-bottom: 1px solid var(--border-color);\n}\n\n.modal-header h3 {\n    margin: 0;\n    color: var(--dark-color);\n}\n\n.modal-close {\n    background: none;\n    border: none;\n    font-size: 1.5rem;\n    cursor: pointer;\n    color: var(--secondary-color);\n    padding: 0;\n    width: 30px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.modal-close:hover {\n    color: var(--dark-color);\n}\n\n.modal-body {\n    padding: 1.5rem;\n}\n\n.stats-summary {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 1rem;\n    margin-bottom: 2rem;\n    text-align: center;\n}\n\n.claim-history h4 {\n    margin-bottom: 1rem;\n    color: var(--dark-color);\n}\n\n.claim-record {\n    display: grid;\n    grid-template-columns: auto auto 1fr;\n    gap: 1rem;\n    padding: 0.75rem;\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    margin-bottom: 0.5rem;\n    font-size: 0.875rem;\n}\n\n.claim-time {\n    color: var(--secondary-color);\n}\n\n.claim-user {\n    font-weight: 500;\n    color: var(--info-color);\n}\n\n.claim-card {\n    font-family: monospace;\n    word-break: break-all;\n}\n\n.progress-bar {\n    width: 100%;\n    height: 8px;\n    background: var(--light-color);\n    border-radius: 4px;\n    overflow: hidden;\n    margin: 1rem 0;\n}\n\n.progress-fill {\n    height: 100%;\n    background: var(--primary-color);\n    transition: width 0.3s ease;\n}\n\n.project-meta {\n    margin-top: 1rem;\n    padding-top: 1rem;\n    border-top: 1px solid var(--border-color);\n    color: var(--secondary-color);\n    font-size: 0.875rem;\n}\n\n@media (max-width: 768px) {\n    .stats-summary {\n        grid-template-columns: repeat(2, 1fr);\n    }\n\n    .claim-record {\n        grid-template-columns: 1fr;\n        gap: 0.5rem;\n    }\n}\n</style>\n`;\n\n// 添加样式到页面\ndocument.head.insertAdjacentHTML('beforeend', modalStyles);\n\n// 全局函数\nfunction importCards() {\n    if (window.app) {\n        window.app.handleCardImport();\n    }\n}\n\nfunction clearCards() {\n    const cardsInput = $('#cards-input');\n    if (cardsInput) {\n        if (cardsInput.value.trim() && !confirm('确定要清空所有卡密内容吗？')) {\n            return;\n        }\n        cardsInput.value = '';\n        if (window.app) {\n            window.app.importedCards = [];\n            window.app.updateCardsCount();\n            window.app.showMessage('已清空卡密内容', 'info');\n        }\n    }\n}\n\nfunction clearImportedCards() {\n    if (window.app) {\n        window.app.clearImportedCards();\n    }\n}\n\n// Add admin methods to CDKApp class\nCDKApp.prototype.loadAdminData = async function() {\n    try {\n        // Load user statistics\n        const statsResponse = await API.admin.getUserStats();\n        if (statsResponse.success) {\n            const stats = statsResponse.data;\n            $('#admin-total-users').textContent = stats.totalUsers;\n            $('#admin-active-users').textContent = stats.activeUsers;\n            $('#admin-banned-users').textContent = stats.bannedUsers;\n        }\n\n        // Load users list\n        const usersResponse = await API.admin.getUsers();\n        if (usersResponse.success) {\n            this.displayUsersList(usersResponse.data);\n        }\n    } catch (error) {\n        console.error('Load admin data error:', error);\n        showToast('加载管理员数据失败', 'error');\n    }\n};\n\nCDKApp.prototype.displayUsersList = function(users) {\n    const usersListEl = $('#users-list');\n    const usersLoadingEl = $('#users-loading');\n\n    if (!usersListEl) {\n        return;\n    }\n\n    // Hide loading indicator\n    if (usersLoadingEl) {\n        usersLoadingEl.style.display = 'none';\n    }\n\n    if (users.length === 0) {\n        usersListEl.innerHTML = '<p class=\"empty-state\">暂无用户</p>';\n        return;\n    }\n\n    const html = users.map(user => {\n        const statusClass = user.isBanned ? 'banned' : 'active';\n        const statusText = user.isBanned ? '已封禁' : '正常';\n        const actionButton = user.isBanned\n            ? `<button class=\"btn btn-success btn-sm\" onclick=\"app.unbanUser('${user.userId}')\">解除封禁</button>`\n            : `<button class=\"btn btn-danger btn-sm\" onclick=\"app.banUser('${user.userId}', '${user.username}')\">封禁</button>`;\n\n        const banReasonHtml = user.isBanned && user.banReason\n            ? `<div class=\"ban-reason\">封禁原因: ${user.banReason}</div>`\n            : '';\n\n        const avatarHtml = user.avatarUrl\n            ? `<img src=\"${user.avatarUrl}\" alt=\"${user.username}\" class=\"user-avatar-admin\">`\n            : `<div class=\"user-avatar-placeholder\">${user.username.charAt(0).toUpperCase()}</div>`;\n\n        return `\n            <div class=\"user-card ${user.isBanned ? 'banned' : ''}\">\n                ${avatarHtml}\n                <div class=\"user-info-admin\">\n                    <div class=\"user-name-admin\">${user.name || user.username}</div>\n                    <div class=\"user-username-admin\">@${user.username}</div>\n                    <div class=\"user-meta\">\n                        <span>用户ID: ${user.userId}</span>\n                        <span>最后登录: ${new Date(user.lastLoginAt).toLocaleString('zh-CN')}</span>\n                    </div>\n                    <span class=\"user-status ${statusClass}\">${statusText}</span>\n                    ${banReasonHtml}\n                </div>\n                <div class=\"user-actions\">\n                    ${actionButton}\n                </div>\n            </div>\n        `;\n    }).join('');\n    usersListEl.innerHTML = html;\n};\n\nCDKApp.prototype.banUser = async function(userId, username) {\n    const reason = prompt(`确定要封禁用户 ${username} 吗？\\n请输入封禁原因(可选):`);\n\n    if (reason === null) return; // User cancelled\n\n    try {\n        const response = await API.admin.banUser(userId, reason || undefined);\n        if (response.success) {\n            showToast(response.data.message || '封禁成功', 'success');\n            await this.loadAdminData();\n        } else {\n            showToast(response.error || '封禁失败', 'error');\n        }\n    } catch (error) {\n        console.error('Ban user error:', error);\n        showToast('封禁用户失败', 'error');\n    }\n};\n\nCDKApp.prototype.unbanUser = async function(userId) {\n    if (!confirm('确定要解除封禁吗？')) return;\n\n    try {\n        const response = await API.admin.unbanUser(userId);\n        if (response.success) {\n            showToast(response.data.message || '解除封禁成功', 'success');\n            await this.loadAdminData();\n        } else {\n            showToast(response.error || '解除封禁失败', 'error');\n        }\n    } catch (error) {\n        console.error('Unban user error:', error);\n        showToast('解除封禁失败', 'error');\n    }\n};\n",
    mimeType: 'application/javascript; charset=utf-8'
  }
};

export function getStaticAsset(path: string): StaticAsset | null {
    // 处理根路径
    if (path === '/' || path === '') {
        return STATIC_ASSETS['/'] || null;
    }
    
    // 直接匹配
    if (STATIC_ASSETS[path]) {
        return STATIC_ASSETS[path];
    }
    
    // 如果路径不以 / 开头，添加 /
    if (!path.startsWith('/')) {
        path = '/' + path;
        if (STATIC_ASSETS[path]) {
            return STATIC_ASSETS[path];
        }
    }
    
    return null;
}
